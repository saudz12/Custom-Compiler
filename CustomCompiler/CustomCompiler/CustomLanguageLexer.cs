//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/UNIV/ANUL_II/LFC - Limbaje Formale si Compilatoare/Custom-Compiler/CustomCompiler/CustomCompiler/CustomLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CustomLanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPENPTHS=1, CLOSEPTHS=2, OPENEDBLOCK=3, CLOSEDBLOCK=4, COMMA=5, SEMICOLON=6, 
		INTEGER_TYPE=7, FLOAT_TYPE=8, DOUBLE_TYPE=9, STRING_TYPE=10, VOID_TYPE=11, 
		MAIN_FUNC=12, RETURN=13, FOR_LOOP=14, WHILE_LOOP=15, ELSE_IF=16, IF=17, 
		ELSE=18, INCREMENT=19, DECREMENT=20, MUL=21, DIV=22, ADD=23, SUB=24, MOD=25, 
		SMALLER_EQ=26, GREATER_EQ=27, SAME=28, DIFF=29, SMALLER=30, GREATER=31, 
		AND=32, NOT=33, OR=34, EQADD=35, EQSUB=36, EQMUL=37, EQDIV=38, EQMOD=39, 
		EQUAL=40, NAME=41, INTEGER_VALUE=42, FLOAT_VALUE=43, STRING_VALUE=44, 
		BLOCK_COMMENTARY=45, LINE_COMMENTARY=46, WS=47;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OPENPTHS", "CLOSEPTHS", "OPENEDBLOCK", "CLOSEDBLOCK", "COMMA", "SEMICOLON", 
		"INTEGER_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "VOID_TYPE", 
		"MAIN_FUNC", "RETURN", "FOR_LOOP", "WHILE_LOOP", "ELSE_IF", "IF", "ELSE", 
		"INCREMENT", "DECREMENT", "MUL", "DIV", "ADD", "SUB", "MOD", "SMALLER_EQ", 
		"GREATER_EQ", "SAME", "DIFF", "SMALLER", "GREATER", "AND", "NOT", "OR", 
		"EQADD", "EQSUB", "EQMUL", "EQDIV", "EQMOD", "EQUAL", "NAME", "INTEGER_VALUE", 
		"FLOAT_VALUE", "STRING_VALUE", "BLOCK_COMMENTARY", "LINE_COMMENTARY", 
		"WS"
	};


	public CustomLanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CustomLanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "','", "';'", "'int'", "'float'", "'double'", 
		"'string'", "'void'", "'main'", "'return'", "'for'", "'while'", "'else if'", 
		"'if'", "'else'", "'++'", "'--'", "'*'", "'/'", "'+'", "'-'", "'%'", "'<='", 
		"'>='", "'=='", "'!='", "'<'", "'>'", "'&&'", "'!'", "'||'", "'+='", "'-='", 
		"'*='", "'/='", "'%='", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPENPTHS", "CLOSEPTHS", "OPENEDBLOCK", "CLOSEDBLOCK", "COMMA", 
		"SEMICOLON", "INTEGER_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", 
		"VOID_TYPE", "MAIN_FUNC", "RETURN", "FOR_LOOP", "WHILE_LOOP", "ELSE_IF", 
		"IF", "ELSE", "INCREMENT", "DECREMENT", "MUL", "DIV", "ADD", "SUB", "MOD", 
		"SMALLER_EQ", "GREATER_EQ", "SAME", "DIFF", "SMALLER", "GREATER", "AND", 
		"NOT", "OR", "EQADD", "EQSUB", "EQMUL", "EQDIV", "EQMOD", "EQUAL", "NAME", 
		"INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", "BLOCK_COMMENTARY", "LINE_COMMENTARY", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CustomLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CustomLanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,47,300,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,1,0,1,1,1,1,1,2,1,2,1,
		3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
		10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
		13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
		19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,
		25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,
		30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,
		35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,5,
		40,234,8,40,10,40,12,40,237,9,40,1,41,4,41,240,8,41,11,41,12,41,241,1,
		42,4,42,245,8,42,11,42,12,42,246,1,42,1,42,4,42,251,8,42,11,42,12,42,252,
		1,43,1,43,1,43,1,43,4,43,259,8,43,11,43,12,43,260,1,43,3,43,264,8,43,1,
		44,1,44,1,44,1,44,4,44,270,8,44,11,44,12,44,271,1,44,1,44,4,44,276,8,44,
		11,44,12,44,277,1,44,1,44,1,45,1,45,1,45,1,45,4,45,286,8,45,11,45,12,45,
		287,1,45,1,45,1,45,1,45,1,46,4,46,295,8,46,11,46,12,46,296,1,46,1,46,3,
		260,271,287,0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
		24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
		36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,1,
		0,5,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,48,57,1,0,10,10,3,0,9,
		10,13,13,32,32,309,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
		1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
		0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
		0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
		0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,1,95,1,0,0,0,3,97,
		1,0,0,0,5,99,1,0,0,0,7,101,1,0,0,0,9,103,1,0,0,0,11,105,1,0,0,0,13,107,
		1,0,0,0,15,111,1,0,0,0,17,117,1,0,0,0,19,124,1,0,0,0,21,131,1,0,0,0,23,
		136,1,0,0,0,25,141,1,0,0,0,27,148,1,0,0,0,29,152,1,0,0,0,31,158,1,0,0,
		0,33,166,1,0,0,0,35,169,1,0,0,0,37,174,1,0,0,0,39,177,1,0,0,0,41,180,1,
		0,0,0,43,182,1,0,0,0,45,184,1,0,0,0,47,186,1,0,0,0,49,188,1,0,0,0,51,190,
		1,0,0,0,53,193,1,0,0,0,55,196,1,0,0,0,57,199,1,0,0,0,59,202,1,0,0,0,61,
		204,1,0,0,0,63,206,1,0,0,0,65,209,1,0,0,0,67,211,1,0,0,0,69,214,1,0,0,
		0,71,217,1,0,0,0,73,220,1,0,0,0,75,223,1,0,0,0,77,226,1,0,0,0,79,229,1,
		0,0,0,81,231,1,0,0,0,83,239,1,0,0,0,85,244,1,0,0,0,87,263,1,0,0,0,89,265,
		1,0,0,0,91,281,1,0,0,0,93,294,1,0,0,0,95,96,5,40,0,0,96,2,1,0,0,0,97,98,
		5,41,0,0,98,4,1,0,0,0,99,100,5,123,0,0,100,6,1,0,0,0,101,102,5,125,0,0,
		102,8,1,0,0,0,103,104,5,44,0,0,104,10,1,0,0,0,105,106,5,59,0,0,106,12,
		1,0,0,0,107,108,5,105,0,0,108,109,5,110,0,0,109,110,5,116,0,0,110,14,1,
		0,0,0,111,112,5,102,0,0,112,113,5,108,0,0,113,114,5,111,0,0,114,115,5,
		97,0,0,115,116,5,116,0,0,116,16,1,0,0,0,117,118,5,100,0,0,118,119,5,111,
		0,0,119,120,5,117,0,0,120,121,5,98,0,0,121,122,5,108,0,0,122,123,5,101,
		0,0,123,18,1,0,0,0,124,125,5,115,0,0,125,126,5,116,0,0,126,127,5,114,0,
		0,127,128,5,105,0,0,128,129,5,110,0,0,129,130,5,103,0,0,130,20,1,0,0,0,
		131,132,5,118,0,0,132,133,5,111,0,0,133,134,5,105,0,0,134,135,5,100,0,
		0,135,22,1,0,0,0,136,137,5,109,0,0,137,138,5,97,0,0,138,139,5,105,0,0,
		139,140,5,110,0,0,140,24,1,0,0,0,141,142,5,114,0,0,142,143,5,101,0,0,143,
		144,5,116,0,0,144,145,5,117,0,0,145,146,5,114,0,0,146,147,5,110,0,0,147,
		26,1,0,0,0,148,149,5,102,0,0,149,150,5,111,0,0,150,151,5,114,0,0,151,28,
		1,0,0,0,152,153,5,119,0,0,153,154,5,104,0,0,154,155,5,105,0,0,155,156,
		5,108,0,0,156,157,5,101,0,0,157,30,1,0,0,0,158,159,5,101,0,0,159,160,5,
		108,0,0,160,161,5,115,0,0,161,162,5,101,0,0,162,163,5,32,0,0,163,164,5,
		105,0,0,164,165,5,102,0,0,165,32,1,0,0,0,166,167,5,105,0,0,167,168,5,102,
		0,0,168,34,1,0,0,0,169,170,5,101,0,0,170,171,5,108,0,0,171,172,5,115,0,
		0,172,173,5,101,0,0,173,36,1,0,0,0,174,175,5,43,0,0,175,176,5,43,0,0,176,
		38,1,0,0,0,177,178,5,45,0,0,178,179,5,45,0,0,179,40,1,0,0,0,180,181,5,
		42,0,0,181,42,1,0,0,0,182,183,5,47,0,0,183,44,1,0,0,0,184,185,5,43,0,0,
		185,46,1,0,0,0,186,187,5,45,0,0,187,48,1,0,0,0,188,189,5,37,0,0,189,50,
		1,0,0,0,190,191,5,60,0,0,191,192,5,61,0,0,192,52,1,0,0,0,193,194,5,62,
		0,0,194,195,5,61,0,0,195,54,1,0,0,0,196,197,5,61,0,0,197,198,5,61,0,0,
		198,56,1,0,0,0,199,200,5,33,0,0,200,201,5,61,0,0,201,58,1,0,0,0,202,203,
		5,60,0,0,203,60,1,0,0,0,204,205,5,62,0,0,205,62,1,0,0,0,206,207,5,38,0,
		0,207,208,5,38,0,0,208,64,1,0,0,0,209,210,5,33,0,0,210,66,1,0,0,0,211,
		212,5,124,0,0,212,213,5,124,0,0,213,68,1,0,0,0,214,215,5,43,0,0,215,216,
		5,61,0,0,216,70,1,0,0,0,217,218,5,45,0,0,218,219,5,61,0,0,219,72,1,0,0,
		0,220,221,5,42,0,0,221,222,5,61,0,0,222,74,1,0,0,0,223,224,5,47,0,0,224,
		225,5,61,0,0,225,76,1,0,0,0,226,227,5,37,0,0,227,228,5,61,0,0,228,78,1,
		0,0,0,229,230,5,61,0,0,230,80,1,0,0,0,231,235,7,0,0,0,232,234,7,1,0,0,
		233,232,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,82,
		1,0,0,0,237,235,1,0,0,0,238,240,7,2,0,0,239,238,1,0,0,0,240,241,1,0,0,
		0,241,239,1,0,0,0,241,242,1,0,0,0,242,84,1,0,0,0,243,245,7,2,0,0,244,243,
		1,0,0,0,245,246,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,
		0,248,250,5,46,0,0,249,251,7,2,0,0,250,249,1,0,0,0,251,252,1,0,0,0,252,
		250,1,0,0,0,252,253,1,0,0,0,253,86,1,0,0,0,254,255,5,34,0,0,255,264,5,
		34,0,0,256,258,5,34,0,0,257,259,9,0,0,0,258,257,1,0,0,0,259,260,1,0,0,
		0,260,261,1,0,0,0,260,258,1,0,0,0,261,262,1,0,0,0,262,264,5,34,0,0,263,
		254,1,0,0,0,263,256,1,0,0,0,264,88,1,0,0,0,265,266,5,47,0,0,266,267,5,
		42,0,0,267,269,1,0,0,0,268,270,9,0,0,0,269,268,1,0,0,0,270,271,1,0,0,0,
		271,272,1,0,0,0,271,269,1,0,0,0,272,275,1,0,0,0,273,274,5,42,0,0,274,276,
		5,47,0,0,275,273,1,0,0,0,276,277,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,
		0,278,279,1,0,0,0,279,280,6,44,0,0,280,90,1,0,0,0,281,282,5,47,0,0,282,
		283,5,47,0,0,283,285,1,0,0,0,284,286,9,0,0,0,285,284,1,0,0,0,286,287,1,
		0,0,0,287,288,1,0,0,0,287,285,1,0,0,0,288,289,1,0,0,0,289,290,7,3,0,0,
		290,291,1,0,0,0,291,292,6,45,0,0,292,92,1,0,0,0,293,295,7,4,0,0,294,293,
		1,0,0,0,295,296,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,
		0,298,299,6,46,0,0,299,94,1,0,0,0,11,0,235,241,246,252,260,263,271,277,
		287,296,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
