//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/UNIV/ANUL_II/LFC - Limbaje Formale si Compilatoare/Custom-Compiler/CustomCompiler/CustomCompiler/CustomLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CustomLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, OPEN_BLOCK=4, CLOSED_BLOCK=5, INTEGER_TYPE=6, 
		FLOAT_TYPE=7, DOUBLE_TYPE=8, STRING_TYPE=9, VOID_TYPE=10, MAIN_FUNC=11, 
		RETURN=12, INCREMENT=13, DECREMENT=14, SEMICOLON=15, MUL=16, DIV=17, ADD=18, 
		SUB=19, MOD=20, SMALLER_EQ=21, GREATER_EQ=22, SAME=23, DIFF=24, SMALLER=25, 
		GREATER=26, AND=27, NOT=28, OR=29, EQADD=30, EQSUB=31, EQMUL=32, EQDIV=33, 
		EQMOD=34, EQUAL=35, NAME=36, INTEGER_VALUE=37, FLOAT_VALUE=38, STRING_VALUE=39, 
		FOR_LOOP=40, WHILE_LOOP=41, IF=42, ELSE_IF=43, ELSE=44, BLOCK_COMMENTARY=45, 
		LINE_COMMENTARY=46, WS=47;
	public const int
		RULE_base_structure = 0, RULE_main = 1, RULE_func_decl = 2, RULE_body = 3, 
		RULE_if_statement = 4, RULE_loop = 5, RULE_return = 6, RULE_attribution = 7, 
		RULE_var_decl = 8, RULE_instruction = 9, RULE_return_type = 10, RULE_data_type = 11, 
		RULE_data_value = 12;
	public static readonly string[] ruleNames = {
		"base_structure", "main", "func_decl", "body", "if_statement", "loop", 
		"return", "attribution", "var_decl", "instruction", "return_type", "data_type", 
		"data_value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'", "'{'", "'}'", "'int'", "'float'", "'double'", 
		"'string'", "'void'", "'main'", "'return'", "'++'", "'--'", "';'", "'*'", 
		"'/'", "'+'", "'-'", "'%'", "'<='", "'>='", "'=='", "'!='", "'<'", "'>'", 
		"'&&'", "'!'", "'||'", "'+='", "'-='", "'*='", "'/='", "'%='", "'='", 
		null, null, null, null, "'for'", "'while'", "'if'", "'else if'", "'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "OPEN_BLOCK", "CLOSED_BLOCK", "INTEGER_TYPE", 
		"FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "VOID_TYPE", "MAIN_FUNC", 
		"RETURN", "INCREMENT", "DECREMENT", "SEMICOLON", "MUL", "DIV", "ADD", 
		"SUB", "MOD", "SMALLER_EQ", "GREATER_EQ", "SAME", "DIFF", "SMALLER", "GREATER", 
		"AND", "NOT", "OR", "EQADD", "EQSUB", "EQMUL", "EQDIV", "EQMOD", "EQUAL", 
		"NAME", "INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", "FOR_LOOP", "WHILE_LOOP", 
		"IF", "ELSE_IF", "ELSE", "BLOCK_COMMENTARY", "LINE_COMMENTARY", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CustomLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CustomLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CustomLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CustomLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Base_structureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext[] func_decl() {
			return GetRuleContexts<Func_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext func_decl(int i) {
			return GetRuleContext<Func_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext[] var_decl() {
			return GetRuleContexts<Var_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl(int i) {
			return GetRuleContext<Var_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CustomLanguageParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CustomLanguageParser.SEMICOLON, i);
		}
		public Base_structureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_structure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_structure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_structureContext base_structure() {
		Base_structureContext _localctx = new Base_structureContext(Context, State);
		EnterRule(_localctx, 0, RULE_base_structure);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 30;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 26;
						func_decl();
						}
						break;
					case 2:
						{
						{
						State = 27;
						var_decl();
						State = 28;
						Match(SEMICOLON);
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 32;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 34;
			main();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN_FUNC() { return GetToken(CustomLanguageParser.MAIN_FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(MAIN_FUNC);
			State = 37;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext[] var_decl() {
			return GetRuleContexts<Var_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl(int i) {
			return GetRuleContext<Var_declContext>(i);
		}
		public Func_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_declContext func_decl() {
		Func_declContext _localctx = new Func_declContext(Context, State);
		EnterRule(_localctx, 4, RULE_func_decl);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			return_type();
			State = 40;
			Match(NAME);
			State = 41;
			Match(T__0);
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 960L) != 0)) {
				{
				{
				State = 42;
				var_decl();
				State = 45;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 43;
						Match(T__1);
						State = 44;
						var_decl();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 47;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				}
			}

			State = 51;
			Match(T__2);
			State = 52;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BLOCK() { return GetToken(CustomLanguageParser.OPEN_BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSED_BLOCK() { return GetToken(CustomLanguageParser.CLOSED_BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext[] var_decl() {
			return GetRuleContexts<Var_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl(int i) {
			return GetRuleContext<Var_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CustomLanguageParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CustomLanguageParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext[] if_statement() {
			return GetRuleContexts<If_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement(int i) {
			return GetRuleContext<If_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext[] loop() {
			return GetRuleContexts<LoopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop(int i) {
			return GetRuleContext<LoopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributionContext[] attribution() {
			return GetRuleContexts<AttributionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributionContext attribution(int i) {
			return GetRuleContext<AttributionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext[] @return() {
			return GetRuleContexts<ReturnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return(int i) {
			return GetRuleContext<ReturnContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_body);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(OPEN_BLOCK);
			State = 69;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 69;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 55;
						var_decl();
						State = 56;
						Match(SEMICOLON);
						}
						break;
					case 2:
						{
						State = 58;
						if_statement();
						}
						break;
					case 3:
						{
						State = 59;
						loop();
						}
						break;
					case 4:
						{
						State = 60;
						attribution();
						State = 61;
						Match(SEMICOLON);
						}
						break;
					case 5:
						{
						State = 63;
						instruction(0);
						State = 64;
						Match(SEMICOLON);
						}
						break;
					case 6:
						{
						State = 66;
						@return();
						State = 67;
						Match(SEMICOLON);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 71;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 73;
			Match(CLOSED_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CustomLanguageParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext[] body() {
			return GetRuleContexts<BodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body(int i) {
			return GetRuleContext<BodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE_IF() { return GetTokens(CustomLanguageParser.ELSE_IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_IF(int i) {
			return GetToken(CustomLanguageParser.ELSE_IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CustomLanguageParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_if_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(IF);
			State = 76;
			Match(T__0);
			State = 77;
			instruction(0);
			State = 78;
			Match(T__2);
			State = 79;
			body();
			State = 85;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 80;
					Match(ELSE_IF);
					State = 81;
					Match(T__0);
					State = 82;
					instruction(0);
					State = 83;
					Match(T__2);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 87;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 89;
			body();
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 90;
				Match(ELSE);
				State = 91;
				body();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_LOOP() { return GetToken(CustomLanguageParser.FOR_LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CustomLanguageParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CustomLanguageParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_LOOP() { return GetToken(CustomLanguageParser.WHILE_LOOP, 0); }
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 10, RULE_loop);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_LOOP:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 94;
				Match(FOR_LOOP);
				State = 95;
				Match(T__0);
				{
				State = 96;
				instruction(0);
				}
				State = 97;
				Match(SEMICOLON);
				{
				State = 98;
				instruction(0);
				}
				State = 99;
				Match(SEMICOLON);
				{
				State = 100;
				instruction(0);
				}
				State = 101;
				Match(T__2);
				}
				}
				break;
			case WHILE_LOOP:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 103;
				Match(WHILE_LOOP);
				State = 104;
				Match(T__0);
				State = 105;
				instruction(0);
				State = 106;
				Match(T__2);
				}
				State = 108;
				body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CustomLanguageParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 12, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(RETURN);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1031060586496L) != 0)) {
				{
				State = 113;
				instruction(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributionContext : ParserRuleContext {
		public AttributionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribution; } }
	 
		public AttributionContext() { }
		public virtual void CopyFrom(AttributionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubtractThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQSUB() { return GetToken(CustomLanguageParser.EQSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public SubtractThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQSUB() { return GetToken(CustomLanguageParser.EQSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public DivideThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AditionThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQADD() { return GetToken(CustomLanguageParser.EQADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public AditionThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAditionThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQSUB() { return GetToken(CustomLanguageParser.EQSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ModuloThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQSUB() { return GetToken(CustomLanguageParser.EQSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public MultiplyThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(CustomLanguageParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public EqualExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributionContext attribution() {
		AttributionContext _localctx = new AttributionContext(Context, State);
		EnterRule(_localctx, 14, RULE_attribution);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new AditionThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				Match(NAME);
				State = 117;
				Match(EQADD);
				State = 118;
				instruction(0);
				}
				break;
			case 2:
				_localctx = new SubtractThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				Match(NAME);
				State = 120;
				Match(EQSUB);
				State = 121;
				instruction(0);
				}
				break;
			case 3:
				_localctx = new MultiplyThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 122;
				Match(NAME);
				State = 123;
				Match(EQSUB);
				State = 124;
				instruction(0);
				}
				break;
			case 4:
				_localctx = new DivideThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 125;
				Match(NAME);
				State = 126;
				Match(EQSUB);
				State = 127;
				instruction(0);
				}
				break;
			case 5:
				_localctx = new ModuloThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 128;
				Match(NAME);
				State = 129;
				Match(EQSUB);
				State = 130;
				instruction(0);
				}
				break;
			case 6:
				_localctx = new EqualExpContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 131;
				Match(NAME);
				State = 132;
				Match(EQUAL);
				State = 133;
				instruction(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(CustomLanguageParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(CustomLanguageParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(CustomLanguageParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(CustomLanguageParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 16, RULE_var_decl);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			data_type();
			State = 137;
			Match(NAME);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 138;
				Match(EQUAL);
				State = 139;
				instruction(0);
				}
			}

			State = 146;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 142;
					Match(T__1);
					State = 143;
					Match(NAME);
					{
					State = 144;
					Match(EQUAL);
					State = 145;
					instruction(0);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
	 
		public InstructionContext() { }
		public virtual void CopyFrom(InstructionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SmallerEqExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER_EQ() { return GetToken(CustomLanguageParser.SMALLER_EQ, 0); }
		public SmallerEqExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAtomExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		public VariableAtomExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueAtomEXpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_valueContext data_value() {
			return GetRuleContext<Data_valueContext>(0);
		}
		public ValueAtomEXpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueAtomEXp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicNotExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(CustomLanguageParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public LogicNotExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicNotExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public FunctionCallExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(CustomLanguageParser.MOD, 0); }
		public ModuloExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterEqExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQ() { return GetToken(CustomLanguageParser.GREATER_EQ, 0); }
		public GreaterEqExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallerExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER() { return GetToken(CustomLanguageParser.SMALLER, 0); }
		public SmallerExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(CustomLanguageParser.GREATER, 0); }
		public GreaterExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicAndExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(CustomLanguageParser.AND, 0); }
		public LogicAndExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAndExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicOrExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(CustomLanguageParser.OR, 0); }
		public LogicOrExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(CustomLanguageParser.SUB, 0); }
		public SubtractExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SameValueExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAME() { return GetToken(CustomLanguageParser.SAME, 0); }
		public SameValueExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSameValueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DiffValueExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFF() { return GetToken(CustomLanguageParser.DIFF, 0); }
		public DiffValueExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiffValueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(CustomLanguageParser.MUL, 0); }
		public MultiplyExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(CustomLanguageParser.DIV, 0); }
		public DivideExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AditionExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(CustomLanguageParser.ADD, 0); }
		public AditionExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAditionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		return instruction(0);
	}

	private InstructionContext instruction(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InstructionContext _localctx = new InstructionContext(Context, _parentState);
		InstructionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_instruction, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				_localctx = new VariableAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 151;
				Match(NAME);
				}
				break;
			case 2:
				{
				_localctx = new ValueAtomEXpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 152;
				data_value();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 153;
				Match(NAME);
				State = 154;
				Match(T__0);
				{
				State = 155;
				instruction(0);
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 156;
					Match(T__1);
					State = 157;
					instruction(0);
					}
					}
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 163;
				Match(T__2);
				}
				break;
			case 4:
				{
				_localctx = new LogicNotExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 165;
				Match(NOT);
				State = 166;
				instruction(14);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 210;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 208;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new AditionExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 169;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 170;
						Match(ADD);
						State = 171;
						instruction(14);
						}
						break;
					case 2:
						{
						_localctx = new SubtractExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 172;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 173;
						Match(SUB);
						State = 174;
						instruction(13);
						}
						break;
					case 3:
						{
						_localctx = new MultiplyExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 175;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 176;
						Match(MUL);
						State = 177;
						instruction(12);
						}
						break;
					case 4:
						{
						_localctx = new DivideExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 178;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 179;
						Match(DIV);
						State = 180;
						instruction(11);
						}
						break;
					case 5:
						{
						_localctx = new ModuloExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 181;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 182;
						Match(MOD);
						State = 183;
						instruction(10);
						}
						break;
					case 6:
						{
						_localctx = new SmallerEqExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 184;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 185;
						Match(SMALLER_EQ);
						State = 186;
						instruction(9);
						}
						break;
					case 7:
						{
						_localctx = new GreaterEqExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 187;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 188;
						Match(GREATER_EQ);
						State = 189;
						instruction(8);
						}
						break;
					case 8:
						{
						_localctx = new SmallerExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 190;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 191;
						Match(SMALLER);
						State = 192;
						instruction(7);
						}
						break;
					case 9:
						{
						_localctx = new GreaterExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 193;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 194;
						Match(GREATER);
						State = 195;
						instruction(6);
						}
						break;
					case 10:
						{
						_localctx = new SameValueExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 196;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 197;
						Match(SAME);
						State = 198;
						instruction(5);
						}
						break;
					case 11:
						{
						_localctx = new DiffValueExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 199;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 200;
						Match(DIFF);
						State = 201;
						instruction(4);
						}
						break;
					case 12:
						{
						_localctx = new LogicAndExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 202;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 203;
						Match(AND);
						State = 204;
						instruction(3);
						}
						break;
					case 13:
						{
						_localctx = new LogicOrExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 205;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 206;
						Match(OR);
						State = 207;
						instruction(2);
						}
						break;
					}
					} 
				}
				State = 212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_TYPE() { return GetToken(CustomLanguageParser.VOID_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_return_type);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213;
				Match(VOID_TYPE);
				}
				break;
			case INTEGER_TYPE:
			case FLOAT_TYPE:
			case DOUBLE_TYPE:
			case STRING_TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214;
				data_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_TYPE() { return GetToken(CustomLanguageParser.INTEGER_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(CustomLanguageParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(CustomLanguageParser.STRING_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(CustomLanguageParser.DOUBLE_TYPE, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 22, RULE_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 960L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(CustomLanguageParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_VALUE() { return GetToken(CustomLanguageParser.FLOAT_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(CustomLanguageParser.STRING_VALUE, 0); }
		public Data_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_valueContext data_value() {
		Data_valueContext _localctx = new Data_valueContext(Context, State);
		EnterRule(_localctx, 24, RULE_data_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return instruction_sempred((InstructionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool instruction_sempred(InstructionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,47,222,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,0,1,0,4,0,
		31,8,0,11,0,12,0,32,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,4,2,46,
		8,2,11,2,12,2,47,3,2,50,8,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,4,3,70,8,3,11,3,12,3,71,1,3,1,3,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,4,4,86,8,4,11,4,12,4,87,1,4,1,4,1,4,3,
		4,93,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,3,5,111,8,5,1,6,1,6,3,6,115,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,135,8,7,1,8,1,8,1,8,1,8,3,8,141,
		8,8,1,8,1,8,1,8,1,8,4,8,147,8,8,11,8,12,8,148,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,5,9,159,8,9,10,9,12,9,162,9,9,1,9,1,9,1,9,1,9,3,9,168,8,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,5,9,209,8,9,10,9,12,9,212,9,9,1,10,1,10,3,10,216,8,10,1,11,
		1,11,1,12,1,12,1,12,5,32,47,71,87,148,1,18,13,0,2,4,6,8,10,12,14,16,18,
		20,22,24,0,2,1,0,6,9,1,0,37,39,247,0,30,1,0,0,0,2,36,1,0,0,0,4,39,1,0,
		0,0,6,54,1,0,0,0,8,75,1,0,0,0,10,110,1,0,0,0,12,112,1,0,0,0,14,134,1,0,
		0,0,16,136,1,0,0,0,18,167,1,0,0,0,20,215,1,0,0,0,22,217,1,0,0,0,24,219,
		1,0,0,0,26,31,3,4,2,0,27,28,3,16,8,0,28,29,5,15,0,0,29,31,1,0,0,0,30,26,
		1,0,0,0,30,27,1,0,0,0,31,32,1,0,0,0,32,33,1,0,0,0,32,30,1,0,0,0,33,34,
		1,0,0,0,34,35,3,2,1,0,35,1,1,0,0,0,36,37,5,11,0,0,37,38,3,6,3,0,38,3,1,
		0,0,0,39,40,3,20,10,0,40,41,5,36,0,0,41,49,5,1,0,0,42,45,3,16,8,0,43,44,
		5,2,0,0,44,46,3,16,8,0,45,43,1,0,0,0,46,47,1,0,0,0,47,48,1,0,0,0,47,45,
		1,0,0,0,48,50,1,0,0,0,49,42,1,0,0,0,49,50,1,0,0,0,50,51,1,0,0,0,51,52,
		5,3,0,0,52,53,3,6,3,0,53,5,1,0,0,0,54,69,5,4,0,0,55,56,3,16,8,0,56,57,
		5,15,0,0,57,70,1,0,0,0,58,70,3,8,4,0,59,70,3,10,5,0,60,61,3,14,7,0,61,
		62,5,15,0,0,62,70,1,0,0,0,63,64,3,18,9,0,64,65,5,15,0,0,65,70,1,0,0,0,
		66,67,3,12,6,0,67,68,5,15,0,0,68,70,1,0,0,0,69,55,1,0,0,0,69,58,1,0,0,
		0,69,59,1,0,0,0,69,60,1,0,0,0,69,63,1,0,0,0,69,66,1,0,0,0,70,71,1,0,0,
		0,71,72,1,0,0,0,71,69,1,0,0,0,72,73,1,0,0,0,73,74,5,5,0,0,74,7,1,0,0,0,
		75,76,5,42,0,0,76,77,5,1,0,0,77,78,3,18,9,0,78,79,5,3,0,0,79,85,3,6,3,
		0,80,81,5,43,0,0,81,82,5,1,0,0,82,83,3,18,9,0,83,84,5,3,0,0,84,86,1,0,
		0,0,85,80,1,0,0,0,86,87,1,0,0,0,87,88,1,0,0,0,87,85,1,0,0,0,88,89,1,0,
		0,0,89,92,3,6,3,0,90,91,5,44,0,0,91,93,3,6,3,0,92,90,1,0,0,0,92,93,1,0,
		0,0,93,9,1,0,0,0,94,95,5,40,0,0,95,96,5,1,0,0,96,97,3,18,9,0,97,98,5,15,
		0,0,98,99,3,18,9,0,99,100,5,15,0,0,100,101,3,18,9,0,101,102,5,3,0,0,102,
		111,1,0,0,0,103,104,5,41,0,0,104,105,5,1,0,0,105,106,3,18,9,0,106,107,
		5,3,0,0,107,108,1,0,0,0,108,109,3,6,3,0,109,111,1,0,0,0,110,94,1,0,0,0,
		110,103,1,0,0,0,111,11,1,0,0,0,112,114,5,12,0,0,113,115,3,18,9,0,114,113,
		1,0,0,0,114,115,1,0,0,0,115,13,1,0,0,0,116,117,5,36,0,0,117,118,5,30,0,
		0,118,135,3,18,9,0,119,120,5,36,0,0,120,121,5,31,0,0,121,135,3,18,9,0,
		122,123,5,36,0,0,123,124,5,31,0,0,124,135,3,18,9,0,125,126,5,36,0,0,126,
		127,5,31,0,0,127,135,3,18,9,0,128,129,5,36,0,0,129,130,5,31,0,0,130,135,
		3,18,9,0,131,132,5,36,0,0,132,133,5,35,0,0,133,135,3,18,9,0,134,116,1,
		0,0,0,134,119,1,0,0,0,134,122,1,0,0,0,134,125,1,0,0,0,134,128,1,0,0,0,
		134,131,1,0,0,0,135,15,1,0,0,0,136,137,3,22,11,0,137,140,5,36,0,0,138,
		139,5,35,0,0,139,141,3,18,9,0,140,138,1,0,0,0,140,141,1,0,0,0,141,146,
		1,0,0,0,142,143,5,2,0,0,143,144,5,36,0,0,144,145,5,35,0,0,145,147,3,18,
		9,0,146,142,1,0,0,0,147,148,1,0,0,0,148,149,1,0,0,0,148,146,1,0,0,0,149,
		17,1,0,0,0,150,151,6,9,-1,0,151,168,5,36,0,0,152,168,3,24,12,0,153,154,
		5,36,0,0,154,155,5,1,0,0,155,160,3,18,9,0,156,157,5,2,0,0,157,159,3,18,
		9,0,158,156,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,
		163,1,0,0,0,162,160,1,0,0,0,163,164,5,3,0,0,164,168,1,0,0,0,165,166,5,
		28,0,0,166,168,3,18,9,14,167,150,1,0,0,0,167,152,1,0,0,0,167,153,1,0,0,
		0,167,165,1,0,0,0,168,210,1,0,0,0,169,170,10,13,0,0,170,171,5,18,0,0,171,
		209,3,18,9,14,172,173,10,12,0,0,173,174,5,19,0,0,174,209,3,18,9,13,175,
		176,10,11,0,0,176,177,5,16,0,0,177,209,3,18,9,12,178,179,10,10,0,0,179,
		180,5,17,0,0,180,209,3,18,9,11,181,182,10,9,0,0,182,183,5,20,0,0,183,209,
		3,18,9,10,184,185,10,8,0,0,185,186,5,21,0,0,186,209,3,18,9,9,187,188,10,
		7,0,0,188,189,5,22,0,0,189,209,3,18,9,8,190,191,10,6,0,0,191,192,5,25,
		0,0,192,209,3,18,9,7,193,194,10,5,0,0,194,195,5,26,0,0,195,209,3,18,9,
		6,196,197,10,4,0,0,197,198,5,23,0,0,198,209,3,18,9,5,199,200,10,3,0,0,
		200,201,5,24,0,0,201,209,3,18,9,4,202,203,10,2,0,0,203,204,5,27,0,0,204,
		209,3,18,9,3,205,206,10,1,0,0,206,207,5,29,0,0,207,209,3,18,9,2,208,169,
		1,0,0,0,208,172,1,0,0,0,208,175,1,0,0,0,208,178,1,0,0,0,208,181,1,0,0,
		0,208,184,1,0,0,0,208,187,1,0,0,0,208,190,1,0,0,0,208,193,1,0,0,0,208,
		196,1,0,0,0,208,199,1,0,0,0,208,202,1,0,0,0,208,205,1,0,0,0,209,212,1,
		0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,19,1,0,0,0,212,210,1,0,0,0,213,
		216,5,10,0,0,214,216,3,22,11,0,215,213,1,0,0,0,215,214,1,0,0,0,216,21,
		1,0,0,0,217,218,7,0,0,0,218,23,1,0,0,0,219,220,7,1,0,0,220,25,1,0,0,0,
		18,30,32,47,49,69,71,87,92,110,114,134,140,148,160,167,208,210,215
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
