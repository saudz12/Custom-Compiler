//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/UNIV/ANUL_II/LFC - Limbaje Formale si Compilatoare/Custom-Compiler/CustomCompiler/CustomCompiler/CustomLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CustomLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPENPTHS=1, CLOSEPTHS=2, OPENEDBLOCK=3, CLOSEDBLOCK=4, COMMA=5, SEMICOLON=6, 
		INTEGER_TYPE=7, FLOAT_TYPE=8, DOUBLE_TYPE=9, STRING_TYPE=10, VOID_TYPE=11, 
		RETURN=12, FOR_LOOP=13, WHILE_LOOP=14, ELSE_IF=15, IF=16, ELSE=17, INCREMENT=18, 
		DECREMENT=19, SMALLER_EQ=20, GREATER_EQ=21, SAME=22, DIFF=23, SMALLER=24, 
		GREATER=25, AND=26, NOT=27, OR=28, EQADD=29, EQSUB=30, EQMUL=31, EQDIV=32, 
		EQMOD=33, EQUAL=34, MUL=35, DIV=36, ADD=37, SUB=38, MOD=39, NAME=40, INTEGER_VALUE=41, 
		FLOAT_VALUE=42, STRING_VALUE=43, BLOCK_COMMENTARY=44, LINE_COMMENTARY=45, 
		WS=46;
	public const int
		RULE_base_structure = 0, RULE_global = 1, RULE_global_var = 2, RULE_func_decl = 3, 
		RULE_body = 4, RULE_openedblock = 5, RULE_closedblock = 6, RULE_if_statement = 7, 
		RULE_other_statements = 8, RULE_else_if_statement = 9, RULE_else_statement = 10, 
		RULE_loop = 11, RULE_code_line = 12, RULE_return = 13, RULE_attribution = 14, 
		RULE_param_decl = 15, RULE_other_param = 16, RULE_init_param = 17, RULE_var_decl = 18, 
		RULE_other_var = 19, RULE_init_var = 20, RULE_instruction = 21, RULE_instruction_list = 22, 
		RULE_other_instructions = 23, RULE_return_type = 24, RULE_data_type = 25, 
		RULE_data_value = 26, RULE_name = 27;
	public static readonly string[] ruleNames = {
		"base_structure", "global", "global_var", "func_decl", "body", "openedblock", 
		"closedblock", "if_statement", "other_statements", "else_if_statement", 
		"else_statement", "loop", "code_line", "return", "attribution", "param_decl", 
		"other_param", "init_param", "var_decl", "other_var", "init_var", "instruction", 
		"instruction_list", "other_instructions", "return_type", "data_type", 
		"data_value", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "','", "';'", "'int'", "'float'", "'double'", 
		"'string'", "'void'", "'return'", "'for'", "'while'", "'else if'", "'if'", 
		"'else'", "'++'", "'--'", "'<='", "'>='", "'=='", "'!='", "'<'", "'>'", 
		"'&&'", "'!'", "'||'", "'+='", "'-='", "'*='", "'/='", "'%='", "'='", 
		"'*'", "'/'", "'+'", "'-'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPENPTHS", "CLOSEPTHS", "OPENEDBLOCK", "CLOSEDBLOCK", "COMMA", 
		"SEMICOLON", "INTEGER_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", 
		"VOID_TYPE", "RETURN", "FOR_LOOP", "WHILE_LOOP", "ELSE_IF", "IF", "ELSE", 
		"INCREMENT", "DECREMENT", "SMALLER_EQ", "GREATER_EQ", "SAME", "DIFF", 
		"SMALLER", "GREATER", "AND", "NOT", "OR", "EQADD", "EQSUB", "EQMUL", "EQDIV", 
		"EQMOD", "EQUAL", "MUL", "DIV", "ADD", "SUB", "MOD", "NAME", "INTEGER_VALUE", 
		"FLOAT_VALUE", "STRING_VALUE", "BLOCK_COMMENTARY", "LINE_COMMENTARY", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CustomLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CustomLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CustomLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CustomLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Base_structureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalContext global() {
			return GetRuleContext<GlobalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext func_decl() {
			return GetRuleContext<Func_declContext>(0);
		}
		public Base_structureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_structure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_structure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_structureContext base_structure() {
		Base_structureContext _localctx = new Base_structureContext(Context, State);
		EnterRule(_localctx, 0, RULE_base_structure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			global();
			State = 57;
			func_decl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext[] func_decl() {
			return GetRuleContexts<Func_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext func_decl(int i) {
			return GetRuleContext<Func_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_varContext[] global_var() {
			return GetRuleContexts<Global_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_varContext global_var(int i) {
			return GetRuleContext<Global_varContext>(i);
		}
		public GlobalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalContext global() {
		GlobalContext _localctx = new GlobalContext(Context, State);
		EnterRule(_localctx, 2, RULE_global);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 61;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 59;
						func_decl();
						}
						break;
					case 2:
						{
						State = 60;
						global_var();
						}
						break;
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CustomLanguageParser.SEMICOLON, 0); }
		public Global_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_varContext global_var() {
		Global_varContext _localctx = new Global_varContext(Context, State);
		EnterRule(_localctx, 4, RULE_global_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			var_decl();
			State = 67;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_declContext param_decl() {
			return GetRuleContext<Param_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Func_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_declContext func_decl() {
		Func_declContext _localctx = new Func_declContext(Context, State);
		EnterRule(_localctx, 6, RULE_func_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			return_type();
			State = 70;
			Match(NAME);
			State = 71;
			Match(OPENPTHS);
			State = 72;
			param_decl();
			State = 73;
			Match(CLOSEPTHS);
			State = 74;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenedblockContext openedblock() {
			return GetRuleContext<OpenedblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosedblockContext closedblock() {
			return GetRuleContext<ClosedblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext[] loop() {
			return GetRuleContexts<LoopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop(int i) {
			return GetRuleContext<LoopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext[] if_statement() {
			return GetRuleContexts<If_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement(int i) {
			return GetRuleContext<If_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_lineContext[] code_line() {
			return GetRuleContexts<Code_lineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_lineContext code_line(int i) {
			return GetRuleContext<Code_lineContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			openedblock();
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16492809516930L) != 0)) {
				{
				State = 80;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR_LOOP:
				case WHILE_LOOP:
					{
					State = 77;
					loop();
					}
					break;
				case IF:
					{
					State = 78;
					if_statement();
					}
					break;
				case OPENPTHS:
				case INTEGER_TYPE:
				case FLOAT_TYPE:
				case DOUBLE_TYPE:
				case STRING_TYPE:
				case RETURN:
				case INCREMENT:
				case DECREMENT:
				case NOT:
				case NAME:
				case INTEGER_VALUE:
				case FLOAT_VALUE:
				case STRING_VALUE:
					{
					State = 79;
					code_line();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85;
			closedblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenedblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENEDBLOCK() { return GetToken(CustomLanguageParser.OPENEDBLOCK, 0); }
		public OpenedblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openedblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenedblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenedblockContext openedblock() {
		OpenedblockContext _localctx = new OpenedblockContext(Context, State);
		EnterRule(_localctx, 10, RULE_openedblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(OPENEDBLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosedblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEDBLOCK() { return GetToken(CustomLanguageParser.CLOSEDBLOCK, 0); }
		public ClosedblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closedblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosedblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosedblockContext closedblock() {
		ClosedblockContext _localctx = new ClosedblockContext(Context, State);
		EnterRule(_localctx, 12, RULE_closedblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(CLOSEDBLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CustomLanguageParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_statementsContext other_statements() {
			return GetRuleContext<Other_statementsContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(IF);
			State = 92;
			Match(OPENPTHS);
			State = 93;
			instruction(0);
			State = 94;
			Match(CLOSEPTHS);
			State = 95;
			body();
			State = 96;
			other_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_statementContext[] else_if_statement() {
			return GetRuleContexts<Else_if_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_statementContext else_if_statement(int i) {
			return GetRuleContext<Else_if_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		public Other_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_statementsContext other_statements() {
		Other_statementsContext _localctx = new Other_statementsContext(Context, State);
		EnterRule(_localctx, 16, RULE_other_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSE_IF) {
				{
				{
				State = 98;
				else_if_statement();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 104;
				else_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_IF() { return GetToken(CustomLanguageParser.ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Else_if_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statementContext else_if_statement() {
		Else_if_statementContext _localctx = new Else_if_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_else_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(ELSE_IF);
			State = 108;
			Match(OPENPTHS);
			State = 109;
			instruction(0);
			State = 110;
			Match(CLOSEPTHS);
			State = 111;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CustomLanguageParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_else_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(ELSE);
			State = 114;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_LOOP() { return GetToken(CustomLanguageParser.FOR_LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CustomLanguageParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CustomLanguageParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_LOOP() { return GetToken(CustomLanguageParser.WHILE_LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributionContext[] attribution() {
			return GetRuleContexts<AttributionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributionContext attribution(int i) {
			return GetRuleContext<AttributionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 22, RULE_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_LOOP:
				{
				{
				State = 116;
				Match(FOR_LOOP);
				State = 117;
				Match(OPENPTHS);
				State = 122;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAME:
					{
					State = 118;
					attribution();
					}
					break;
				case SEMICOLON:
				case INTEGER_TYPE:
				case FLOAT_TYPE:
				case DOUBLE_TYPE:
				case STRING_TYPE:
					{
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) {
						{
						State = 119;
						var_decl();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 124;
				Match(SEMICOLON);
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16492809420802L) != 0)) {
					{
					State = 125;
					instruction(0);
					}
				}

				State = 128;
				Match(SEMICOLON);
				State = 133;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16492809420802L) != 0)) {
						{
						State = 129;
						instruction(0);
						}
					}

					}
					break;
				case 2:
					{
					State = 132;
					attribution();
					}
					break;
				}
				State = 135;
				Match(CLOSEPTHS);
				}
				}
				break;
			case WHILE_LOOP:
				{
				{
				State = 136;
				Match(WHILE_LOOP);
				State = 137;
				Match(OPENPTHS);
				State = 138;
				instruction(0);
				State = 139;
				Match(CLOSEPTHS);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 143;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_lineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CustomLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributionContext attribution() {
			return GetRuleContext<AttributionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public Code_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_lineContext code_line() {
		Code_lineContext _localctx = new Code_lineContext(Context, State);
		EnterRule(_localctx, 24, RULE_code_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 145;
				attribution();
				}
				break;
			case 2:
				{
				State = 146;
				instruction(0);
				}
				break;
			case 3:
				{
				State = 147;
				@return();
				}
				break;
			case 4:
				{
				State = 148;
				var_decl();
				}
				break;
			}
			State = 151;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CustomLanguageParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 26, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(RETURN);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16492809420802L) != 0)) {
				{
				State = 154;
				instruction(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributionContext : ParserRuleContext {
		public AttributionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribution; } }
	 
		public AttributionContext() { }
		public virtual void CopyFrom(AttributionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubtractThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQSUB() { return GetToken(CustomLanguageParser.EQSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public SubtractThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQDIV() { return GetToken(CustomLanguageParser.EQDIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public DivideThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AditionThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQADD() { return GetToken(CustomLanguageParser.EQADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public AditionThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAditionThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQMOD() { return GetToken(CustomLanguageParser.EQMOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ModuloThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQMUL() { return GetToken(CustomLanguageParser.EQMUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public MultiplyThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(CustomLanguageParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public EqualExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributionContext attribution() {
		AttributionContext _localctx = new AttributionContext(Context, State);
		EnterRule(_localctx, 28, RULE_attribution);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new AditionThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				name();
				State = 158;
				Match(EQADD);
				State = 159;
				instruction(0);
				}
				break;
			case 2:
				_localctx = new SubtractThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 161;
				name();
				State = 162;
				Match(EQSUB);
				State = 163;
				instruction(0);
				}
				break;
			case 3:
				_localctx = new MultiplyThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				name();
				State = 166;
				Match(EQMUL);
				State = 167;
				instruction(0);
				}
				break;
			case 4:
				_localctx = new DivideThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 169;
				name();
				State = 170;
				Match(EQDIV);
				State = 171;
				instruction(0);
				}
				break;
			case 5:
				_localctx = new ModuloThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 173;
				name();
				State = 174;
				Match(EQMOD);
				State = 175;
				instruction(0);
				}
				break;
			case 6:
				_localctx = new EqualExpContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 177;
				name();
				State = 178;
				Match(EQUAL);
				State = 179;
				instruction(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Init_paramContext init_param() {
			return GetRuleContext<Init_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_paramContext[] other_param() {
			return GetRuleContexts<Other_paramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_paramContext other_param(int i) {
			return GetRuleContext<Other_paramContext>(i);
		}
		public Param_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_declContext param_decl() {
		Param_declContext _localctx = new Param_declContext(Context, State);
		EnterRule(_localctx, 30, RULE_param_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) {
				{
				State = 183;
				init_param();
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 184;
					other_param();
					}
					}
					State = 189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CustomLanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Init_paramContext init_param() {
			return GetRuleContext<Init_paramContext>(0);
		}
		public Other_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_paramContext other_param() {
		Other_paramContext _localctx = new Other_paramContext(Context, State);
		EnterRule(_localctx, 32, RULE_other_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(COMMA);
			State = 193;
			init_param();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Init_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_paramContext init_param() {
		Init_paramContext _localctx = new Init_paramContext(Context, State);
		EnterRule(_localctx, 34, RULE_init_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			data_type();
			State = 196;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Init_varContext init_var() {
			return GetRuleContext<Init_varContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_varContext[] other_var() {
			return GetRuleContexts<Other_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_varContext other_var(int i) {
			return GetRuleContext<Other_varContext>(i);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 36, RULE_var_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			data_type();
			State = 199;
			init_var();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 200;
				other_var();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CustomLanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Init_varContext init_var() {
			return GetRuleContext<Init_varContext>(0);
		}
		public Other_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_varContext other_var() {
		Other_varContext _localctx = new Other_varContext(Context, State);
		EnterRule(_localctx, 38, RULE_other_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(COMMA);
			State = 207;
			init_var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(CustomLanguageParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public Init_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_varContext init_var() {
		Init_varContext _localctx = new Init_varContext(Context, State);
		EnterRule(_localctx, 40, RULE_init_var);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			name();
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 210;
				Match(EQUAL);
				State = 211;
				instruction(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
	 
		public InstructionContext() { }
		public virtual void CopyFrom(InstructionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SmallerEqExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER_EQ() { return GetToken(CustomLanguageParser.SMALLER_EQ, 0); }
		public SmallerEqExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreincrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(CustomLanguageParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public PreincrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreincrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAtomExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VariableAtomExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueAtomEXpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_valueContext data_value() {
			return GetRuleContext<Data_valueContext>(0);
		}
		public ValueAtomEXpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueAtomEXp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredecrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(CustomLanguageParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public PredecrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredecrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicNotExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(CustomLanguageParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public LogicNotExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicNotExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Instruction_listContext instruction_list() {
			return GetRuleContext<Instruction_listContext>(0);
		}
		public FunctionCallExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostdecrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(CustomLanguageParser.DECREMENT, 0); }
		public PostdecrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostdecrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(CustomLanguageParser.MOD, 0); }
		public ModuloExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterEqExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQ() { return GetToken(CustomLanguageParser.GREATER_EQ, 0); }
		public GreaterEqExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallerExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER() { return GetToken(CustomLanguageParser.SMALLER, 0); }
		public SmallerExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(CustomLanguageParser.GREATER, 0); }
		public GreaterExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicAndExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(CustomLanguageParser.AND, 0); }
		public LogicAndExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAndExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicOrExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(CustomLanguageParser.OR, 0); }
		public LogicOrExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParanhesisExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		public ParanhesisExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParanhesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(CustomLanguageParser.SUB, 0); }
		public SubtractExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SameValueExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAME() { return GetToken(CustomLanguageParser.SAME, 0); }
		public SameValueExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSameValueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DiffValueExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFF() { return GetToken(CustomLanguageParser.DIFF, 0); }
		public DiffValueExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiffValueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(CustomLanguageParser.MUL, 0); }
		public MultiplyExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(CustomLanguageParser.DIV, 0); }
		public DivideExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AditionExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(CustomLanguageParser.ADD, 0); }
		public AditionExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAditionExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostincrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(CustomLanguageParser.INCREMENT, 0); }
		public PostincrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostincrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		return instruction(0);
	}

	private InstructionContext instruction(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InstructionContext _localctx = new InstructionContext(Context, _parentState);
		InstructionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_instruction, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				_localctx = new VariableAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 215;
				name();
				}
				break;
			case 2:
				{
				_localctx = new ValueAtomEXpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 216;
				data_value();
				}
				break;
			case 3:
				{
				_localctx = new ParanhesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 217;
				Match(OPENPTHS);
				State = 218;
				instruction(0);
				State = 219;
				Match(CLOSEPTHS);
				}
				break;
			case 4:
				{
				_localctx = new FunctionCallExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 221;
				name();
				State = 222;
				Match(OPENPTHS);
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16492809420802L) != 0)) {
					{
					State = 223;
					instruction_list();
					}
				}

				State = 226;
				Match(CLOSEPTHS);
				}
				break;
			case 5:
				{
				_localctx = new LogicNotExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 228;
				Match(NOT);
				State = 229;
				instruction(18);
				}
				break;
			case 6:
				{
				_localctx = new PreincrementExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 230;
				Match(INCREMENT);
				State = 231;
				instruction(17);
				}
				break;
			case 7:
				{
				_localctx = new PredecrementExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 232;
				Match(DECREMENT);
				State = 233;
				instruction(15);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 281;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 279;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new AditionExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 236;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 237;
						Match(ADD);
						State = 238;
						instruction(14);
						}
						break;
					case 2:
						{
						_localctx = new SubtractExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 239;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 240;
						Match(SUB);
						State = 241;
						instruction(13);
						}
						break;
					case 3:
						{
						_localctx = new MultiplyExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 242;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 243;
						Match(MUL);
						State = 244;
						instruction(12);
						}
						break;
					case 4:
						{
						_localctx = new DivideExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 245;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 246;
						Match(DIV);
						State = 247;
						instruction(11);
						}
						break;
					case 5:
						{
						_localctx = new ModuloExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 248;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 249;
						Match(MOD);
						State = 250;
						instruction(10);
						}
						break;
					case 6:
						{
						_localctx = new SmallerEqExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 251;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 252;
						Match(SMALLER_EQ);
						State = 253;
						instruction(9);
						}
						break;
					case 7:
						{
						_localctx = new GreaterEqExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 254;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 255;
						Match(GREATER_EQ);
						State = 256;
						instruction(8);
						}
						break;
					case 8:
						{
						_localctx = new SmallerExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 257;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 258;
						Match(SMALLER);
						State = 259;
						instruction(7);
						}
						break;
					case 9:
						{
						_localctx = new GreaterExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 260;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 261;
						Match(GREATER);
						State = 262;
						instruction(6);
						}
						break;
					case 10:
						{
						_localctx = new SameValueExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 263;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 264;
						Match(SAME);
						State = 265;
						instruction(5);
						}
						break;
					case 11:
						{
						_localctx = new DiffValueExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 266;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 267;
						Match(DIFF);
						State = 268;
						instruction(4);
						}
						break;
					case 12:
						{
						_localctx = new LogicAndExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 269;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 270;
						Match(AND);
						State = 271;
						instruction(3);
						}
						break;
					case 13:
						{
						_localctx = new LogicOrExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 272;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 273;
						Match(OR);
						State = 274;
						instruction(2);
						}
						break;
					case 14:
						{
						_localctx = new PostincrementExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 275;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 276;
						Match(INCREMENT);
						}
						break;
					case 15:
						{
						_localctx = new PostdecrementExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 277;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 278;
						Match(DECREMENT);
						}
						break;
					}
					} 
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Instruction_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_instructionsContext[] other_instructions() {
			return GetRuleContexts<Other_instructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_instructionsContext other_instructions(int i) {
			return GetRuleContext<Other_instructionsContext>(i);
		}
		public Instruction_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_listContext instruction_list() {
		Instruction_listContext _localctx = new Instruction_listContext(Context, State);
		EnterRule(_localctx, 44, RULE_instruction_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			instruction(0);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 285;
				other_instructions();
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_instructionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CustomLanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public Other_instructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_instructions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_instructions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_instructionsContext other_instructions() {
		Other_instructionsContext _localctx = new Other_instructionsContext(Context, State);
		EnterRule(_localctx, 46, RULE_other_instructions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(COMMA);
			State = 292;
			instruction(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_TYPE() { return GetToken(CustomLanguageParser.VOID_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_TYPE() { return GetToken(CustomLanguageParser.INTEGER_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(CustomLanguageParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(CustomLanguageParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(CustomLanguageParser.STRING_TYPE, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 48, RULE_return_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3968L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_TYPE() { return GetToken(CustomLanguageParser.INTEGER_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(CustomLanguageParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(CustomLanguageParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(CustomLanguageParser.STRING_TYPE, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 50, RULE_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_VALUE() { return GetToken(CustomLanguageParser.FLOAT_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(CustomLanguageParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(CustomLanguageParser.STRING_VALUE, 0); }
		public Data_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_valueContext data_value() {
		Data_valueContext _localctx = new Data_valueContext(Context, State);
		EnterRule(_localctx, 52, RULE_data_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15393162788864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 54, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return instruction_sempred((InstructionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool instruction_sempred(InstructionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		case 13: return Precpred(Context, 16);
		case 14: return Precpred(Context, 14);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,46,303,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,0,1,
		0,1,1,1,1,5,1,62,8,1,10,1,12,1,65,9,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,4,1,4,1,4,1,4,5,4,81,8,4,10,4,12,4,84,9,4,1,4,1,4,1,5,1,5,1,
		6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,5,8,100,8,8,10,8,12,8,103,9,8,1,
		8,3,8,106,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
		11,3,11,121,8,11,3,11,123,8,11,1,11,1,11,3,11,127,8,11,1,11,1,11,3,11,
		131,8,11,1,11,3,11,134,8,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,142,8,11,
		1,11,1,11,1,12,1,12,1,12,1,12,3,12,150,8,12,1,12,1,12,1,13,1,13,3,13,156,
		8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,182,8,14,1,
		15,1,15,5,15,186,8,15,10,15,12,15,189,9,15,3,15,191,8,15,1,16,1,16,1,16,
		1,17,1,17,1,17,1,18,1,18,1,18,5,18,202,8,18,10,18,12,18,205,9,18,1,19,
		1,19,1,19,1,20,1,20,1,20,3,20,213,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,3,21,225,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		3,21,235,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,5,21,280,8,21,10,21,12,21,283,9,21,1,22,1,22,5,22,287,
		8,22,10,22,12,22,290,9,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
		1,27,1,27,1,27,0,1,42,28,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,0,3,1,0,7,11,1,0,7,10,1,0,41,43,323,0,
		56,1,0,0,0,2,63,1,0,0,0,4,66,1,0,0,0,6,69,1,0,0,0,8,76,1,0,0,0,10,87,1,
		0,0,0,12,89,1,0,0,0,14,91,1,0,0,0,16,101,1,0,0,0,18,107,1,0,0,0,20,113,
		1,0,0,0,22,141,1,0,0,0,24,149,1,0,0,0,26,153,1,0,0,0,28,181,1,0,0,0,30,
		190,1,0,0,0,32,192,1,0,0,0,34,195,1,0,0,0,36,198,1,0,0,0,38,206,1,0,0,
		0,40,209,1,0,0,0,42,234,1,0,0,0,44,284,1,0,0,0,46,291,1,0,0,0,48,294,1,
		0,0,0,50,296,1,0,0,0,52,298,1,0,0,0,54,300,1,0,0,0,56,57,3,2,1,0,57,58,
		3,6,3,0,58,1,1,0,0,0,59,62,3,6,3,0,60,62,3,4,2,0,61,59,1,0,0,0,61,60,1,
		0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,3,1,0,0,0,65,63,1,0,
		0,0,66,67,3,36,18,0,67,68,5,6,0,0,68,5,1,0,0,0,69,70,3,48,24,0,70,71,5,
		40,0,0,71,72,5,1,0,0,72,73,3,30,15,0,73,74,5,2,0,0,74,75,3,8,4,0,75,7,
		1,0,0,0,76,82,3,10,5,0,77,81,3,22,11,0,78,81,3,14,7,0,79,81,3,24,12,0,
		80,77,1,0,0,0,80,78,1,0,0,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,
		82,83,1,0,0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,86,3,12,6,0,86,9,1,0,0,0,
		87,88,5,3,0,0,88,11,1,0,0,0,89,90,5,4,0,0,90,13,1,0,0,0,91,92,5,16,0,0,
		92,93,5,1,0,0,93,94,3,42,21,0,94,95,5,2,0,0,95,96,3,8,4,0,96,97,3,16,8,
		0,97,15,1,0,0,0,98,100,3,18,9,0,99,98,1,0,0,0,100,103,1,0,0,0,101,99,1,
		0,0,0,101,102,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,104,106,3,20,10,
		0,105,104,1,0,0,0,105,106,1,0,0,0,106,17,1,0,0,0,107,108,5,15,0,0,108,
		109,5,1,0,0,109,110,3,42,21,0,110,111,5,2,0,0,111,112,3,8,4,0,112,19,1,
		0,0,0,113,114,5,17,0,0,114,115,3,8,4,0,115,21,1,0,0,0,116,117,5,13,0,0,
		117,122,5,1,0,0,118,123,3,28,14,0,119,121,3,36,18,0,120,119,1,0,0,0,120,
		121,1,0,0,0,121,123,1,0,0,0,122,118,1,0,0,0,122,120,1,0,0,0,123,124,1,
		0,0,0,124,126,5,6,0,0,125,127,3,42,21,0,126,125,1,0,0,0,126,127,1,0,0,
		0,127,128,1,0,0,0,128,133,5,6,0,0,129,131,3,42,21,0,130,129,1,0,0,0,130,
		131,1,0,0,0,131,134,1,0,0,0,132,134,3,28,14,0,133,130,1,0,0,0,133,132,
		1,0,0,0,134,135,1,0,0,0,135,142,5,2,0,0,136,137,5,14,0,0,137,138,5,1,0,
		0,138,139,3,42,21,0,139,140,5,2,0,0,140,142,1,0,0,0,141,116,1,0,0,0,141,
		136,1,0,0,0,142,143,1,0,0,0,143,144,3,8,4,0,144,23,1,0,0,0,145,150,3,28,
		14,0,146,150,3,42,21,0,147,150,3,26,13,0,148,150,3,36,18,0,149,145,1,0,
		0,0,149,146,1,0,0,0,149,147,1,0,0,0,149,148,1,0,0,0,150,151,1,0,0,0,151,
		152,5,6,0,0,152,25,1,0,0,0,153,155,5,12,0,0,154,156,3,42,21,0,155,154,
		1,0,0,0,155,156,1,0,0,0,156,27,1,0,0,0,157,158,3,54,27,0,158,159,5,29,
		0,0,159,160,3,42,21,0,160,182,1,0,0,0,161,162,3,54,27,0,162,163,5,30,0,
		0,163,164,3,42,21,0,164,182,1,0,0,0,165,166,3,54,27,0,166,167,5,31,0,0,
		167,168,3,42,21,0,168,182,1,0,0,0,169,170,3,54,27,0,170,171,5,32,0,0,171,
		172,3,42,21,0,172,182,1,0,0,0,173,174,3,54,27,0,174,175,5,33,0,0,175,176,
		3,42,21,0,176,182,1,0,0,0,177,178,3,54,27,0,178,179,5,34,0,0,179,180,3,
		42,21,0,180,182,1,0,0,0,181,157,1,0,0,0,181,161,1,0,0,0,181,165,1,0,0,
		0,181,169,1,0,0,0,181,173,1,0,0,0,181,177,1,0,0,0,182,29,1,0,0,0,183,187,
		3,34,17,0,184,186,3,32,16,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,1,
		0,0,0,187,188,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,190,183,1,0,0,0,
		190,191,1,0,0,0,191,31,1,0,0,0,192,193,5,5,0,0,193,194,3,34,17,0,194,33,
		1,0,0,0,195,196,3,50,25,0,196,197,3,54,27,0,197,35,1,0,0,0,198,199,3,50,
		25,0,199,203,3,40,20,0,200,202,3,38,19,0,201,200,1,0,0,0,202,205,1,0,0,
		0,203,201,1,0,0,0,203,204,1,0,0,0,204,37,1,0,0,0,205,203,1,0,0,0,206,207,
		5,5,0,0,207,208,3,40,20,0,208,39,1,0,0,0,209,212,3,54,27,0,210,211,5,34,
		0,0,211,213,3,42,21,0,212,210,1,0,0,0,212,213,1,0,0,0,213,41,1,0,0,0,214,
		215,6,21,-1,0,215,235,3,54,27,0,216,235,3,52,26,0,217,218,5,1,0,0,218,
		219,3,42,21,0,219,220,5,2,0,0,220,235,1,0,0,0,221,222,3,54,27,0,222,224,
		5,1,0,0,223,225,3,44,22,0,224,223,1,0,0,0,224,225,1,0,0,0,225,226,1,0,
		0,0,226,227,5,2,0,0,227,235,1,0,0,0,228,229,5,27,0,0,229,235,3,42,21,18,
		230,231,5,18,0,0,231,235,3,42,21,17,232,233,5,19,0,0,233,235,3,42,21,15,
		234,214,1,0,0,0,234,216,1,0,0,0,234,217,1,0,0,0,234,221,1,0,0,0,234,228,
		1,0,0,0,234,230,1,0,0,0,234,232,1,0,0,0,235,281,1,0,0,0,236,237,10,13,
		0,0,237,238,5,37,0,0,238,280,3,42,21,14,239,240,10,12,0,0,240,241,5,38,
		0,0,241,280,3,42,21,13,242,243,10,11,0,0,243,244,5,35,0,0,244,280,3,42,
		21,12,245,246,10,10,0,0,246,247,5,36,0,0,247,280,3,42,21,11,248,249,10,
		9,0,0,249,250,5,39,0,0,250,280,3,42,21,10,251,252,10,8,0,0,252,253,5,20,
		0,0,253,280,3,42,21,9,254,255,10,7,0,0,255,256,5,21,0,0,256,280,3,42,21,
		8,257,258,10,6,0,0,258,259,5,24,0,0,259,280,3,42,21,7,260,261,10,5,0,0,
		261,262,5,25,0,0,262,280,3,42,21,6,263,264,10,4,0,0,264,265,5,22,0,0,265,
		280,3,42,21,5,266,267,10,3,0,0,267,268,5,23,0,0,268,280,3,42,21,4,269,
		270,10,2,0,0,270,271,5,26,0,0,271,280,3,42,21,3,272,273,10,1,0,0,273,274,
		5,28,0,0,274,280,3,42,21,2,275,276,10,16,0,0,276,280,5,18,0,0,277,278,
		10,14,0,0,278,280,5,19,0,0,279,236,1,0,0,0,279,239,1,0,0,0,279,242,1,0,
		0,0,279,245,1,0,0,0,279,248,1,0,0,0,279,251,1,0,0,0,279,254,1,0,0,0,279,
		257,1,0,0,0,279,260,1,0,0,0,279,263,1,0,0,0,279,266,1,0,0,0,279,269,1,
		0,0,0,279,272,1,0,0,0,279,275,1,0,0,0,279,277,1,0,0,0,280,283,1,0,0,0,
		281,279,1,0,0,0,281,282,1,0,0,0,282,43,1,0,0,0,283,281,1,0,0,0,284,288,
		3,42,21,0,285,287,3,46,23,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,1,
		0,0,0,288,289,1,0,0,0,289,45,1,0,0,0,290,288,1,0,0,0,291,292,5,5,0,0,292,
		293,3,42,21,0,293,47,1,0,0,0,294,295,7,0,0,0,295,49,1,0,0,0,296,297,7,
		1,0,0,297,51,1,0,0,0,298,299,7,2,0,0,299,53,1,0,0,0,300,301,5,40,0,0,301,
		55,1,0,0,0,24,61,63,80,82,101,105,120,122,126,130,133,141,149,155,181,
		187,190,203,212,224,234,279,281,288
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
