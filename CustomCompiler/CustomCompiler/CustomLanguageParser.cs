//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/UNIV/ANUL_II/LFC - Limbaje Formale si Compilatoare/Custom-Compiler/CustomCompiler/CustomCompiler/CustomLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CustomLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPENPTHS=1, CLOSEPTHS=2, OPENEDBLOCK=3, CLOSEDBLOCK=4, COMMA=5, SEMICOLON=6, 
		INTEGER_TYPE=7, FLOAT_TYPE=8, DOUBLE_TYPE=9, STRING_TYPE=10, VOID_TYPE=11, 
		RETURN=12, FOR_LOOP=13, WHILE_LOOP=14, ELSE_IF=15, IF=16, ELSE=17, INCREMENT=18, 
		DECREMENT=19, SMALLER_EQ=20, GREATER_EQ=21, SAME=22, DIFF=23, SMALLER=24, 
		GREATER=25, AND=26, NOT=27, OR=28, EQADD=29, EQSUB=30, EQMUL=31, EQDIV=32, 
		EQMOD=33, EQUAL=34, MUL=35, DIV=36, ADD=37, SUB=38, MOD=39, NAME=40, INTEGER_VALUE=41, 
		FLOAT_VALUE=42, STRING_VALUE=43, BLOCK_COMMENTARY=44, LINE_COMMENTARY=45, 
		WS=46;
	public const int
		RULE_base_structure = 0, RULE_global = 1, RULE_global_var = 2, RULE_func_decl = 3, 
		RULE_body = 4, RULE_openedblock = 5, RULE_closedblock = 6, RULE_if_statement = 7, 
		RULE_other_statements = 8, RULE_else_if_statement = 9, RULE_else_statement = 10, 
		RULE_for_loop = 11, RULE_for_param = 12, RULE_for_step = 13, RULE_while_loop = 14, 
		RULE_code_line = 15, RULE_return = 16, RULE_attribution = 17, RULE_param_decl = 18, 
		RULE_other_param = 19, RULE_init_param = 20, RULE_var_decl = 21, RULE_other_var = 22, 
		RULE_init_var = 23, RULE_instruction = 24, RULE_instruction_list = 25, 
		RULE_other_instructions = 26, RULE_return_type = 27, RULE_data_type = 28, 
		RULE_data_value = 29, RULE_name = 30;
	public static readonly string[] ruleNames = {
		"base_structure", "global", "global_var", "func_decl", "body", "openedblock", 
		"closedblock", "if_statement", "other_statements", "else_if_statement", 
		"else_statement", "for_loop", "for_param", "for_step", "while_loop", "code_line", 
		"return", "attribution", "param_decl", "other_param", "init_param", "var_decl", 
		"other_var", "init_var", "instruction", "instruction_list", "other_instructions", 
		"return_type", "data_type", "data_value", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "','", "';'", "'int'", "'float'", "'double'", 
		"'string'", "'void'", "'return'", "'for'", "'while'", "'else if'", "'if'", 
		"'else'", "'++'", "'--'", "'<='", "'>='", "'=='", "'!='", "'<'", "'>'", 
		"'&&'", "'!'", "'||'", "'+='", "'-='", "'*='", "'/='", "'%='", "'='", 
		"'*'", "'/'", "'+'", "'-'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPENPTHS", "CLOSEPTHS", "OPENEDBLOCK", "CLOSEDBLOCK", "COMMA", 
		"SEMICOLON", "INTEGER_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", 
		"VOID_TYPE", "RETURN", "FOR_LOOP", "WHILE_LOOP", "ELSE_IF", "IF", "ELSE", 
		"INCREMENT", "DECREMENT", "SMALLER_EQ", "GREATER_EQ", "SAME", "DIFF", 
		"SMALLER", "GREATER", "AND", "NOT", "OR", "EQADD", "EQSUB", "EQMUL", "EQDIV", 
		"EQMOD", "EQUAL", "MUL", "DIV", "ADD", "SUB", "MOD", "NAME", "INTEGER_VALUE", 
		"FLOAT_VALUE", "STRING_VALUE", "BLOCK_COMMENTARY", "LINE_COMMENTARY", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CustomLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CustomLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CustomLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CustomLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Base_structureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalContext global() {
			return GetRuleContext<GlobalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext func_decl() {
			return GetRuleContext<Func_declContext>(0);
		}
		public Base_structureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_structure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_structure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_structureContext base_structure() {
		Base_structureContext _localctx = new Base_structureContext(Context, State);
		EnterRule(_localctx, 0, RULE_base_structure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			global();
			State = 63;
			func_decl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext[] func_decl() {
			return GetRuleContexts<Func_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext func_decl(int i) {
			return GetRuleContext<Func_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_varContext[] global_var() {
			return GetRuleContexts<Global_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_varContext global_var(int i) {
			return GetRuleContext<Global_varContext>(i);
		}
		public GlobalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalContext global() {
		GlobalContext _localctx = new GlobalContext(Context, State);
		EnterRule(_localctx, 2, RULE_global);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 67;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 65;
						func_decl();
						}
						break;
					case 2:
						{
						State = 66;
						global_var();
						}
						break;
					}
					} 
				}
				State = 71;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CustomLanguageParser.SEMICOLON, 0); }
		public Global_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_varContext global_var() {
		Global_varContext _localctx = new Global_varContext(Context, State);
		EnterRule(_localctx, 4, RULE_global_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			var_decl();
			State = 73;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_declContext param_decl() {
			return GetRuleContext<Param_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Func_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_declContext func_decl() {
		Func_declContext _localctx = new Func_declContext(Context, State);
		EnterRule(_localctx, 6, RULE_func_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			return_type();
			State = 76;
			Match(NAME);
			State = 77;
			Match(OPENPTHS);
			State = 78;
			param_decl();
			State = 79;
			Match(CLOSEPTHS);
			State = 80;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenedblockContext openedblock() {
			return GetRuleContext<OpenedblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosedblockContext closedblock() {
			return GetRuleContext<ClosedblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_loopContext[] for_loop() {
			return GetRuleContexts<For_loopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_loopContext for_loop(int i) {
			return GetRuleContext<For_loopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext[] while_loop() {
			return GetRuleContexts<While_loopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop(int i) {
			return GetRuleContext<While_loopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext[] if_statement() {
			return GetRuleContexts<If_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement(int i) {
			return GetRuleContext<If_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_lineContext[] code_line() {
			return GetRuleContexts<Code_lineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_lineContext code_line(int i) {
			return GetRuleContext<Code_lineContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			openedblock();
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16492809516930L) != 0)) {
				{
				State = 87;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR_LOOP:
					{
					State = 83;
					for_loop();
					}
					break;
				case WHILE_LOOP:
					{
					State = 84;
					while_loop();
					}
					break;
				case IF:
					{
					State = 85;
					if_statement();
					}
					break;
				case OPENPTHS:
				case INTEGER_TYPE:
				case FLOAT_TYPE:
				case DOUBLE_TYPE:
				case STRING_TYPE:
				case RETURN:
				case INCREMENT:
				case DECREMENT:
				case NOT:
				case NAME:
				case INTEGER_VALUE:
				case FLOAT_VALUE:
				case STRING_VALUE:
					{
					State = 86;
					code_line();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			closedblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenedblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENEDBLOCK() { return GetToken(CustomLanguageParser.OPENEDBLOCK, 0); }
		public OpenedblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openedblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenedblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenedblockContext openedblock() {
		OpenedblockContext _localctx = new OpenedblockContext(Context, State);
		EnterRule(_localctx, 10, RULE_openedblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(OPENEDBLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosedblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEDBLOCK() { return GetToken(CustomLanguageParser.CLOSEDBLOCK, 0); }
		public ClosedblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closedblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosedblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosedblockContext closedblock() {
		ClosedblockContext _localctx = new ClosedblockContext(Context, State);
		EnterRule(_localctx, 12, RULE_closedblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(CLOSEDBLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CustomLanguageParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_statementsContext other_statements() {
			return GetRuleContext<Other_statementsContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(IF);
			State = 99;
			Match(OPENPTHS);
			State = 100;
			instruction(0);
			State = 101;
			Match(CLOSEPTHS);
			State = 102;
			body();
			State = 103;
			other_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_statementContext[] else_if_statement() {
			return GetRuleContexts<Else_if_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_statementContext else_if_statement(int i) {
			return GetRuleContext<Else_if_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		public Other_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_statementsContext other_statements() {
		Other_statementsContext _localctx = new Other_statementsContext(Context, State);
		EnterRule(_localctx, 16, RULE_other_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSE_IF) {
				{
				{
				State = 105;
				else_if_statement();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 111;
				else_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_IF() { return GetToken(CustomLanguageParser.ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Else_if_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statementContext else_if_statement() {
		Else_if_statementContext _localctx = new Else_if_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_else_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(ELSE_IF);
			State = 115;
			Match(OPENPTHS);
			State = 116;
			instruction(0);
			State = 117;
			Match(CLOSEPTHS);
			State = 118;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CustomLanguageParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_else_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(ELSE);
			State = 121;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_LOOP() { return GetToken(CustomLanguageParser.FOR_LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CustomLanguageParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CustomLanguageParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_paramContext for_param() {
			return GetRuleContext<For_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_stepContext for_step() {
			return GetRuleContext<For_stepContext>(0);
		}
		public For_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_loopContext for_loop() {
		For_loopContext _localctx = new For_loopContext(Context, State);
		EnterRule(_localctx, 22, RULE_for_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(FOR_LOOP);
			State = 124;
			Match(OPENPTHS);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1099511629696L) != 0)) {
				{
				State = 125;
				for_param();
				}
			}

			State = 128;
			Match(SEMICOLON);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16492809420802L) != 0)) {
				{
				State = 129;
				instruction(0);
				}
			}

			State = 132;
			Match(SEMICOLON);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16492809420802L) != 0)) {
				{
				State = 133;
				for_step();
				}
			}

			State = 136;
			Match(CLOSEPTHS);
			State = 137;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributionContext attribution() {
			return GetRuleContext<AttributionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public For_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_paramContext for_param() {
		For_paramContext _localctx = new For_paramContext(Context, State);
		EnterRule(_localctx, 24, RULE_for_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 139;
				attribution();
				}
				break;
			case INTEGER_TYPE:
			case FLOAT_TYPE:
			case DOUBLE_TYPE:
			case STRING_TYPE:
				{
				State = 140;
				var_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_stepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributionContext attribution() {
			return GetRuleContext<AttributionContext>(0);
		}
		public For_stepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_step; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_step(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_stepContext for_step() {
		For_stepContext _localctx = new For_stepContext(Context, State);
		EnterRule(_localctx, 26, RULE_for_step);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 143;
				instruction(0);
				}
				break;
			case 2:
				{
				State = 144;
				attribution();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_LOOP() { return GetToken(CustomLanguageParser.WHILE_LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 28, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(WHILE_LOOP);
			State = 148;
			Match(OPENPTHS);
			State = 149;
			instruction(0);
			State = 150;
			Match(CLOSEPTHS);
			State = 151;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_lineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CustomLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributionContext attribution() {
			return GetRuleContext<AttributionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public Code_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_lineContext code_line() {
		Code_lineContext _localctx = new Code_lineContext(Context, State);
		EnterRule(_localctx, 30, RULE_code_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 153;
				attribution();
				}
				break;
			case 2:
				{
				State = 154;
				instruction(0);
				}
				break;
			case 3:
				{
				State = 155;
				@return();
				}
				break;
			case 4:
				{
				State = 156;
				var_decl();
				}
				break;
			}
			State = 159;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CustomLanguageParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 32, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(RETURN);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16492809420802L) != 0)) {
				{
				State = 162;
				instruction(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributionContext : ParserRuleContext {
		public AttributionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribution; } }
	 
		public AttributionContext() { }
		public virtual void CopyFrom(AttributionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubtractThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQSUB() { return GetToken(CustomLanguageParser.EQSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public SubtractThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQDIV() { return GetToken(CustomLanguageParser.EQDIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public DivideThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AditionThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQADD() { return GetToken(CustomLanguageParser.EQADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public AditionThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAditionThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQMOD() { return GetToken(CustomLanguageParser.EQMOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ModuloThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQMUL() { return GetToken(CustomLanguageParser.EQMUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public MultiplyThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(CustomLanguageParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public EqualExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributionContext attribution() {
		AttributionContext _localctx = new AttributionContext(Context, State);
		EnterRule(_localctx, 34, RULE_attribution);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new AditionThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				name();
				State = 166;
				Match(EQADD);
				State = 167;
				instruction(0);
				}
				break;
			case 2:
				_localctx = new SubtractThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				name();
				State = 170;
				Match(EQSUB);
				State = 171;
				instruction(0);
				}
				break;
			case 3:
				_localctx = new MultiplyThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 173;
				name();
				State = 174;
				Match(EQMUL);
				State = 175;
				instruction(0);
				}
				break;
			case 4:
				_localctx = new DivideThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 177;
				name();
				State = 178;
				Match(EQDIV);
				State = 179;
				instruction(0);
				}
				break;
			case 5:
				_localctx = new ModuloThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 181;
				name();
				State = 182;
				Match(EQMOD);
				State = 183;
				instruction(0);
				}
				break;
			case 6:
				_localctx = new EqualExpContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 185;
				name();
				State = 186;
				Match(EQUAL);
				State = 187;
				instruction(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Init_paramContext init_param() {
			return GetRuleContext<Init_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_paramContext[] other_param() {
			return GetRuleContexts<Other_paramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_paramContext other_param(int i) {
			return GetRuleContext<Other_paramContext>(i);
		}
		public Param_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_declContext param_decl() {
		Param_declContext _localctx = new Param_declContext(Context, State);
		EnterRule(_localctx, 36, RULE_param_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) {
				{
				State = 191;
				init_param();
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 192;
					other_param();
					}
					}
					State = 197;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CustomLanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Init_paramContext init_param() {
			return GetRuleContext<Init_paramContext>(0);
		}
		public Other_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_paramContext other_param() {
		Other_paramContext _localctx = new Other_paramContext(Context, State);
		EnterRule(_localctx, 38, RULE_other_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(COMMA);
			State = 201;
			init_param();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Init_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_paramContext init_param() {
		Init_paramContext _localctx = new Init_paramContext(Context, State);
		EnterRule(_localctx, 40, RULE_init_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			data_type();
			State = 204;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Init_varContext init_var() {
			return GetRuleContext<Init_varContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_varContext[] other_var() {
			return GetRuleContexts<Other_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_varContext other_var(int i) {
			return GetRuleContext<Other_varContext>(i);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 42, RULE_var_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			data_type();
			State = 207;
			init_var();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 208;
				other_var();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CustomLanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Init_varContext init_var() {
			return GetRuleContext<Init_varContext>(0);
		}
		public Other_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_varContext other_var() {
		Other_varContext _localctx = new Other_varContext(Context, State);
		EnterRule(_localctx, 44, RULE_other_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(COMMA);
			State = 215;
			init_var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(CustomLanguageParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public Init_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_varContext init_var() {
		Init_varContext _localctx = new Init_varContext(Context, State);
		EnterRule(_localctx, 46, RULE_init_var);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			name();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 218;
				Match(EQUAL);
				State = 219;
				instruction(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
	 
		public InstructionContext() { }
		public virtual void CopyFrom(InstructionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SmallerEqExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER_EQ() { return GetToken(CustomLanguageParser.SMALLER_EQ, 0); }
		public SmallerEqExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreincrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(CustomLanguageParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public PreincrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreincrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAtomExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VariableAtomExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueAtomEXpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_valueContext data_value() {
			return GetRuleContext<Data_valueContext>(0);
		}
		public ValueAtomEXpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueAtomEXp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredecrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(CustomLanguageParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public PredecrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredecrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicNotExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(CustomLanguageParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public LogicNotExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicNotExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Instruction_listContext instruction_list() {
			return GetRuleContext<Instruction_listContext>(0);
		}
		public FunctionCallExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostdecrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(CustomLanguageParser.DECREMENT, 0); }
		public PostdecrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostdecrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(CustomLanguageParser.MOD, 0); }
		public ModuloExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterEqExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQ() { return GetToken(CustomLanguageParser.GREATER_EQ, 0); }
		public GreaterEqExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallerExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER() { return GetToken(CustomLanguageParser.SMALLER, 0); }
		public SmallerExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(CustomLanguageParser.GREATER, 0); }
		public GreaterExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicAndExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(CustomLanguageParser.AND, 0); }
		public LogicAndExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAndExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicOrExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(CustomLanguageParser.OR, 0); }
		public LogicOrExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParanhesisExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		public ParanhesisExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParanhesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(CustomLanguageParser.SUB, 0); }
		public SubtractExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SameValueExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAME() { return GetToken(CustomLanguageParser.SAME, 0); }
		public SameValueExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSameValueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DiffValueExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFF() { return GetToken(CustomLanguageParser.DIFF, 0); }
		public DiffValueExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiffValueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(CustomLanguageParser.MUL, 0); }
		public MultiplyExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(CustomLanguageParser.DIV, 0); }
		public DivideExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AditionExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(CustomLanguageParser.ADD, 0); }
		public AditionExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAditionExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostincrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(CustomLanguageParser.INCREMENT, 0); }
		public PostincrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostincrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		return instruction(0);
	}

	private InstructionContext instruction(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InstructionContext _localctx = new InstructionContext(Context, _parentState);
		InstructionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_instruction, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				_localctx = new VariableAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 223;
				name();
				}
				break;
			case 2:
				{
				_localctx = new ValueAtomEXpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 224;
				data_value();
				}
				break;
			case 3:
				{
				_localctx = new ParanhesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 225;
				Match(OPENPTHS);
				State = 226;
				instruction(0);
				State = 227;
				Match(CLOSEPTHS);
				}
				break;
			case 4:
				{
				_localctx = new FunctionCallExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 229;
				name();
				State = 230;
				Match(OPENPTHS);
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16492809420802L) != 0)) {
					{
					State = 231;
					instruction_list();
					}
				}

				State = 234;
				Match(CLOSEPTHS);
				}
				break;
			case 5:
				{
				_localctx = new LogicNotExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 236;
				Match(NOT);
				State = 237;
				instruction(18);
				}
				break;
			case 6:
				{
				_localctx = new PreincrementExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 238;
				Match(INCREMENT);
				State = 239;
				instruction(17);
				}
				break;
			case 7:
				{
				_localctx = new PredecrementExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 240;
				Match(DECREMENT);
				State = 241;
				instruction(15);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 287;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new AditionExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 244;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 245;
						Match(ADD);
						State = 246;
						instruction(14);
						}
						break;
					case 2:
						{
						_localctx = new SubtractExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 247;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 248;
						Match(SUB);
						State = 249;
						instruction(13);
						}
						break;
					case 3:
						{
						_localctx = new MultiplyExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 250;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 251;
						Match(MUL);
						State = 252;
						instruction(12);
						}
						break;
					case 4:
						{
						_localctx = new DivideExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 253;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 254;
						Match(DIV);
						State = 255;
						instruction(11);
						}
						break;
					case 5:
						{
						_localctx = new ModuloExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 256;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 257;
						Match(MOD);
						State = 258;
						instruction(10);
						}
						break;
					case 6:
						{
						_localctx = new SmallerEqExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 259;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 260;
						Match(SMALLER_EQ);
						State = 261;
						instruction(9);
						}
						break;
					case 7:
						{
						_localctx = new GreaterEqExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 262;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 263;
						Match(GREATER_EQ);
						State = 264;
						instruction(8);
						}
						break;
					case 8:
						{
						_localctx = new SmallerExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 265;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 266;
						Match(SMALLER);
						State = 267;
						instruction(7);
						}
						break;
					case 9:
						{
						_localctx = new GreaterExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 268;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 269;
						Match(GREATER);
						State = 270;
						instruction(6);
						}
						break;
					case 10:
						{
						_localctx = new SameValueExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 271;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 272;
						Match(SAME);
						State = 273;
						instruction(5);
						}
						break;
					case 11:
						{
						_localctx = new DiffValueExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 274;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 275;
						Match(DIFF);
						State = 276;
						instruction(4);
						}
						break;
					case 12:
						{
						_localctx = new LogicAndExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 277;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 278;
						Match(AND);
						State = 279;
						instruction(3);
						}
						break;
					case 13:
						{
						_localctx = new LogicOrExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 280;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 281;
						Match(OR);
						State = 282;
						instruction(2);
						}
						break;
					case 14:
						{
						_localctx = new PostincrementExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 283;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 284;
						Match(INCREMENT);
						}
						break;
					case 15:
						{
						_localctx = new PostdecrementExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 285;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 286;
						Match(DECREMENT);
						}
						break;
					}
					} 
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Instruction_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_instructionsContext[] other_instructions() {
			return GetRuleContexts<Other_instructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_instructionsContext other_instructions(int i) {
			return GetRuleContext<Other_instructionsContext>(i);
		}
		public Instruction_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_listContext instruction_list() {
		Instruction_listContext _localctx = new Instruction_listContext(Context, State);
		EnterRule(_localctx, 50, RULE_instruction_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			instruction(0);
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 293;
				other_instructions();
				}
				}
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_instructionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CustomLanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public Other_instructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_instructions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_instructions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_instructionsContext other_instructions() {
		Other_instructionsContext _localctx = new Other_instructionsContext(Context, State);
		EnterRule(_localctx, 52, RULE_other_instructions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(COMMA);
			State = 300;
			instruction(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_TYPE() { return GetToken(CustomLanguageParser.VOID_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_TYPE() { return GetToken(CustomLanguageParser.INTEGER_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(CustomLanguageParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(CustomLanguageParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(CustomLanguageParser.STRING_TYPE, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 54, RULE_return_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3968L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_TYPE() { return GetToken(CustomLanguageParser.INTEGER_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(CustomLanguageParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(CustomLanguageParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(CustomLanguageParser.STRING_TYPE, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 56, RULE_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_VALUE() { return GetToken(CustomLanguageParser.FLOAT_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(CustomLanguageParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(CustomLanguageParser.STRING_VALUE, 0); }
		public Data_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_valueContext data_value() {
		Data_valueContext _localctx = new Data_valueContext(Context, State);
		EnterRule(_localctx, 58, RULE_data_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15393162788864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 60, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return instruction_sempred((InstructionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool instruction_sempred(InstructionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		case 13: return Precpred(Context, 16);
		case 14: return Precpred(Context, 14);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,46,311,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,1,1,1,5,1,68,8,1,10,1,12,1,71,9,1,1,
		2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,5,4,88,8,4,10,
		4,12,4,91,9,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
		5,8,107,8,8,10,8,12,8,110,9,8,1,8,3,8,113,8,8,1,9,1,9,1,9,1,9,1,9,1,9,
		1,10,1,10,1,10,1,11,1,11,1,11,3,11,127,8,11,1,11,1,11,3,11,131,8,11,1,
		11,1,11,3,11,135,8,11,1,11,1,11,1,11,1,12,1,12,3,12,142,8,12,1,13,1,13,
		3,13,146,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,158,
		8,15,1,15,1,15,1,16,1,16,3,16,164,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,3,17,190,8,17,1,18,1,18,5,18,194,8,18,10,18,12,18,197,
		9,18,3,18,199,8,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,5,21,210,
		8,21,10,21,12,21,213,9,21,1,22,1,22,1,22,1,23,1,23,1,23,3,23,221,8,23,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,233,8,24,1,24,1,
		24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,243,8,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,288,8,24,10,24,
		12,24,291,9,24,1,25,1,25,5,25,295,8,25,10,25,12,25,298,9,25,1,26,1,26,
		1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,0,1,48,31,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,0,3,1,0,7,11,1,0,7,10,1,0,41,43,328,0,62,1,0,0,0,2,69,1,0,0,0,4,
		72,1,0,0,0,6,75,1,0,0,0,8,82,1,0,0,0,10,94,1,0,0,0,12,96,1,0,0,0,14,98,
		1,0,0,0,16,108,1,0,0,0,18,114,1,0,0,0,20,120,1,0,0,0,22,123,1,0,0,0,24,
		141,1,0,0,0,26,145,1,0,0,0,28,147,1,0,0,0,30,157,1,0,0,0,32,161,1,0,0,
		0,34,189,1,0,0,0,36,198,1,0,0,0,38,200,1,0,0,0,40,203,1,0,0,0,42,206,1,
		0,0,0,44,214,1,0,0,0,46,217,1,0,0,0,48,242,1,0,0,0,50,292,1,0,0,0,52,299,
		1,0,0,0,54,302,1,0,0,0,56,304,1,0,0,0,58,306,1,0,0,0,60,308,1,0,0,0,62,
		63,3,2,1,0,63,64,3,6,3,0,64,1,1,0,0,0,65,68,3,6,3,0,66,68,3,4,2,0,67,65,
		1,0,0,0,67,66,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,3,1,
		0,0,0,71,69,1,0,0,0,72,73,3,42,21,0,73,74,5,6,0,0,74,5,1,0,0,0,75,76,3,
		54,27,0,76,77,5,40,0,0,77,78,5,1,0,0,78,79,3,36,18,0,79,80,5,2,0,0,80,
		81,3,8,4,0,81,7,1,0,0,0,82,89,3,10,5,0,83,88,3,22,11,0,84,88,3,28,14,0,
		85,88,3,14,7,0,86,88,3,30,15,0,87,83,1,0,0,0,87,84,1,0,0,0,87,85,1,0,0,
		0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,92,1,0,0,
		0,91,89,1,0,0,0,92,93,3,12,6,0,93,9,1,0,0,0,94,95,5,3,0,0,95,11,1,0,0,
		0,96,97,5,4,0,0,97,13,1,0,0,0,98,99,5,16,0,0,99,100,5,1,0,0,100,101,3,
		48,24,0,101,102,5,2,0,0,102,103,3,8,4,0,103,104,3,16,8,0,104,15,1,0,0,
		0,105,107,3,18,9,0,106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,
		109,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,111,113,3,20,10,0,112,111,
		1,0,0,0,112,113,1,0,0,0,113,17,1,0,0,0,114,115,5,15,0,0,115,116,5,1,0,
		0,116,117,3,48,24,0,117,118,5,2,0,0,118,119,3,8,4,0,119,19,1,0,0,0,120,
		121,5,17,0,0,121,122,3,8,4,0,122,21,1,0,0,0,123,124,5,13,0,0,124,126,5,
		1,0,0,125,127,3,24,12,0,126,125,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,
		0,128,130,5,6,0,0,129,131,3,48,24,0,130,129,1,0,0,0,130,131,1,0,0,0,131,
		132,1,0,0,0,132,134,5,6,0,0,133,135,3,26,13,0,134,133,1,0,0,0,134,135,
		1,0,0,0,135,136,1,0,0,0,136,137,5,2,0,0,137,138,3,8,4,0,138,23,1,0,0,0,
		139,142,3,34,17,0,140,142,3,42,21,0,141,139,1,0,0,0,141,140,1,0,0,0,142,
		25,1,0,0,0,143,146,3,48,24,0,144,146,3,34,17,0,145,143,1,0,0,0,145,144,
		1,0,0,0,146,27,1,0,0,0,147,148,5,14,0,0,148,149,5,1,0,0,149,150,3,48,24,
		0,150,151,5,2,0,0,151,152,3,8,4,0,152,29,1,0,0,0,153,158,3,34,17,0,154,
		158,3,48,24,0,155,158,3,32,16,0,156,158,3,42,21,0,157,153,1,0,0,0,157,
		154,1,0,0,0,157,155,1,0,0,0,157,156,1,0,0,0,158,159,1,0,0,0,159,160,5,
		6,0,0,160,31,1,0,0,0,161,163,5,12,0,0,162,164,3,48,24,0,163,162,1,0,0,
		0,163,164,1,0,0,0,164,33,1,0,0,0,165,166,3,60,30,0,166,167,5,29,0,0,167,
		168,3,48,24,0,168,190,1,0,0,0,169,170,3,60,30,0,170,171,5,30,0,0,171,172,
		3,48,24,0,172,190,1,0,0,0,173,174,3,60,30,0,174,175,5,31,0,0,175,176,3,
		48,24,0,176,190,1,0,0,0,177,178,3,60,30,0,178,179,5,32,0,0,179,180,3,48,
		24,0,180,190,1,0,0,0,181,182,3,60,30,0,182,183,5,33,0,0,183,184,3,48,24,
		0,184,190,1,0,0,0,185,186,3,60,30,0,186,187,5,34,0,0,187,188,3,48,24,0,
		188,190,1,0,0,0,189,165,1,0,0,0,189,169,1,0,0,0,189,173,1,0,0,0,189,177,
		1,0,0,0,189,181,1,0,0,0,189,185,1,0,0,0,190,35,1,0,0,0,191,195,3,40,20,
		0,192,194,3,38,19,0,193,192,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,
		196,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,198,191,1,0,0,0,198,199,1,
		0,0,0,199,37,1,0,0,0,200,201,5,5,0,0,201,202,3,40,20,0,202,39,1,0,0,0,
		203,204,3,56,28,0,204,205,3,60,30,0,205,41,1,0,0,0,206,207,3,56,28,0,207,
		211,3,46,23,0,208,210,3,44,22,0,209,208,1,0,0,0,210,213,1,0,0,0,211,209,
		1,0,0,0,211,212,1,0,0,0,212,43,1,0,0,0,213,211,1,0,0,0,214,215,5,5,0,0,
		215,216,3,46,23,0,216,45,1,0,0,0,217,220,3,60,30,0,218,219,5,34,0,0,219,
		221,3,48,24,0,220,218,1,0,0,0,220,221,1,0,0,0,221,47,1,0,0,0,222,223,6,
		24,-1,0,223,243,3,60,30,0,224,243,3,58,29,0,225,226,5,1,0,0,226,227,3,
		48,24,0,227,228,5,2,0,0,228,243,1,0,0,0,229,230,3,60,30,0,230,232,5,1,
		0,0,231,233,3,50,25,0,232,231,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,
		234,235,5,2,0,0,235,243,1,0,0,0,236,237,5,27,0,0,237,243,3,48,24,18,238,
		239,5,18,0,0,239,243,3,48,24,17,240,241,5,19,0,0,241,243,3,48,24,15,242,
		222,1,0,0,0,242,224,1,0,0,0,242,225,1,0,0,0,242,229,1,0,0,0,242,236,1,
		0,0,0,242,238,1,0,0,0,242,240,1,0,0,0,243,289,1,0,0,0,244,245,10,13,0,
		0,245,246,5,37,0,0,246,288,3,48,24,14,247,248,10,12,0,0,248,249,5,38,0,
		0,249,288,3,48,24,13,250,251,10,11,0,0,251,252,5,35,0,0,252,288,3,48,24,
		12,253,254,10,10,0,0,254,255,5,36,0,0,255,288,3,48,24,11,256,257,10,9,
		0,0,257,258,5,39,0,0,258,288,3,48,24,10,259,260,10,8,0,0,260,261,5,20,
		0,0,261,288,3,48,24,9,262,263,10,7,0,0,263,264,5,21,0,0,264,288,3,48,24,
		8,265,266,10,6,0,0,266,267,5,24,0,0,267,288,3,48,24,7,268,269,10,5,0,0,
		269,270,5,25,0,0,270,288,3,48,24,6,271,272,10,4,0,0,272,273,5,22,0,0,273,
		288,3,48,24,5,274,275,10,3,0,0,275,276,5,23,0,0,276,288,3,48,24,4,277,
		278,10,2,0,0,278,279,5,26,0,0,279,288,3,48,24,3,280,281,10,1,0,0,281,282,
		5,28,0,0,282,288,3,48,24,2,283,284,10,16,0,0,284,288,5,18,0,0,285,286,
		10,14,0,0,286,288,5,19,0,0,287,244,1,0,0,0,287,247,1,0,0,0,287,250,1,0,
		0,0,287,253,1,0,0,0,287,256,1,0,0,0,287,259,1,0,0,0,287,262,1,0,0,0,287,
		265,1,0,0,0,287,268,1,0,0,0,287,271,1,0,0,0,287,274,1,0,0,0,287,277,1,
		0,0,0,287,280,1,0,0,0,287,283,1,0,0,0,287,285,1,0,0,0,288,291,1,0,0,0,
		289,287,1,0,0,0,289,290,1,0,0,0,290,49,1,0,0,0,291,289,1,0,0,0,292,296,
		3,48,24,0,293,295,3,52,26,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,1,
		0,0,0,296,297,1,0,0,0,297,51,1,0,0,0,298,296,1,0,0,0,299,300,5,5,0,0,300,
		301,3,48,24,0,301,53,1,0,0,0,302,303,7,0,0,0,303,55,1,0,0,0,304,305,7,
		1,0,0,305,57,1,0,0,0,306,307,7,2,0,0,307,59,1,0,0,0,308,309,5,40,0,0,309,
		61,1,0,0,0,23,67,69,87,89,108,112,126,130,134,141,145,157,163,189,195,
		198,211,220,232,242,287,289,296
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
