//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/UNIV/ANUL_II/LFC - Limbaje Formale si Compilatoare/Custom-Compiler/CustomCompiler/CustomCompiler/CustomLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CustomLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPENPTHS=1, CLOSEPTHS=2, OPENEDBLOCK=3, CLOSEDBLOCK=4, COMMA=5, SEMICOLON=6, 
		INTEGER_TYPE=7, FLOAT_TYPE=8, DOUBLE_TYPE=9, STRING_TYPE=10, VOID_TYPE=11, 
		MAIN_FUNC=12, RETURN=13, FOR_LOOP=14, WHILE_LOOP=15, ELSE_IF=16, IF=17, 
		ELSE=18, INCREMENT=19, DECREMENT=20, MUL=21, DIV=22, ADD=23, SUB=24, MOD=25, 
		SMALLER_EQ=26, GREATER_EQ=27, SAME=28, DIFF=29, SMALLER=30, GREATER=31, 
		AND=32, NOT=33, OR=34, EQADD=35, EQSUB=36, EQMUL=37, EQDIV=38, EQMOD=39, 
		EQUAL=40, NAME=41, INTEGER_VALUE=42, FLOAT_VALUE=43, STRING_VALUE=44, 
		BLOCK_COMMENTARY=45, LINE_COMMENTARY=46, WS=47;
	public const int
		RULE_base_structure = 0, RULE_main = 1, RULE_global = 2, RULE_global_var = 3, 
		RULE_func_decl = 4, RULE_body = 5, RULE_openedblock = 6, RULE_closedblock = 7, 
		RULE_if_statement = 8, RULE_other_statements = 9, RULE_else_if_statement = 10, 
		RULE_else_statement = 11, RULE_loop = 12, RULE_code_line = 13, RULE_return = 14, 
		RULE_attribution = 15, RULE_param_decl = 16, RULE_other_param = 17, RULE_init_param = 18, 
		RULE_var_decl = 19, RULE_other_var = 20, RULE_init_var = 21, RULE_instruction = 22, 
		RULE_instruction_list = 23, RULE_other_instructions = 24, RULE_return_type = 25, 
		RULE_data_type = 26, RULE_data_value = 27, RULE_name = 28;
	public static readonly string[] ruleNames = {
		"base_structure", "main", "global", "global_var", "func_decl", "body", 
		"openedblock", "closedblock", "if_statement", "other_statements", "else_if_statement", 
		"else_statement", "loop", "code_line", "return", "attribution", "param_decl", 
		"other_param", "init_param", "var_decl", "other_var", "init_var", "instruction", 
		"instruction_list", "other_instructions", "return_type", "data_type", 
		"data_value", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "','", "';'", "'int'", "'float'", "'double'", 
		"'string'", "'void'", "'main'", "'return'", "'for'", "'while'", "'else if'", 
		"'if'", "'else'", "'++'", "'--'", "'*'", "'/'", "'+'", "'-'", "'%'", "'<='", 
		"'>='", "'=='", "'!='", "'<'", "'>'", "'&&'", "'!'", "'||'", "'+='", "'-='", 
		"'*='", "'/='", "'%='", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPENPTHS", "CLOSEPTHS", "OPENEDBLOCK", "CLOSEDBLOCK", "COMMA", 
		"SEMICOLON", "INTEGER_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", 
		"VOID_TYPE", "MAIN_FUNC", "RETURN", "FOR_LOOP", "WHILE_LOOP", "ELSE_IF", 
		"IF", "ELSE", "INCREMENT", "DECREMENT", "MUL", "DIV", "ADD", "SUB", "MOD", 
		"SMALLER_EQ", "GREATER_EQ", "SAME", "DIFF", "SMALLER", "GREATER", "AND", 
		"NOT", "OR", "EQADD", "EQSUB", "EQMUL", "EQDIV", "EQMOD", "EQUAL", "NAME", 
		"INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", "BLOCK_COMMENTARY", "LINE_COMMENTARY", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CustomLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CustomLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CustomLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CustomLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Base_structureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalContext global() {
			return GetRuleContext<GlobalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public Base_structureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_structure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_structure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_structureContext base_structure() {
		Base_structureContext _localctx = new Base_structureContext(Context, State);
		EnterRule(_localctx, 0, RULE_base_structure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			global();
			State = 59;
			main();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN_FUNC() { return GetToken(CustomLanguageParser.MAIN_FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_declContext param_decl() {
			return GetRuleContext<Param_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			return_type();
			State = 62;
			Match(MAIN_FUNC);
			State = 63;
			Match(OPENPTHS);
			State = 64;
			param_decl();
			State = 65;
			Match(CLOSEPTHS);
			State = 66;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext[] func_decl() {
			return GetRuleContexts<Func_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext func_decl(int i) {
			return GetRuleContext<Func_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_varContext[] global_var() {
			return GetRuleContexts<Global_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_varContext global_var(int i) {
			return GetRuleContext<Global_varContext>(i);
		}
		public GlobalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalContext global() {
		GlobalContext _localctx = new GlobalContext(Context, State);
		EnterRule(_localctx, 4, RULE_global);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 70;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 68;
						func_decl();
						}
						break;
					case 2:
						{
						State = 69;
						global_var();
						}
						break;
					}
					} 
				}
				State = 74;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CustomLanguageParser.SEMICOLON, 0); }
		public Global_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_varContext global_var() {
		Global_varContext _localctx = new Global_varContext(Context, State);
		EnterRule(_localctx, 6, RULE_global_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			var_decl();
			State = 76;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_declContext param_decl() {
			return GetRuleContext<Param_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Func_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_declContext func_decl() {
		Func_declContext _localctx = new Func_declContext(Context, State);
		EnterRule(_localctx, 8, RULE_func_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			return_type();
			State = 79;
			Match(NAME);
			State = 80;
			Match(OPENPTHS);
			State = 81;
			param_decl();
			State = 82;
			Match(CLOSEPTHS);
			State = 83;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenedblockContext openedblock() {
			return GetRuleContext<OpenedblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosedblockContext closedblock() {
			return GetRuleContext<ClosedblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext[] loop() {
			return GetRuleContexts<LoopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop(int i) {
			return GetRuleContext<LoopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext[] if_statement() {
			return GetRuleContexts<If_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement(int i) {
			return GetRuleContext<If_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_lineContext[] code_line() {
			return GetRuleContexts<Code_lineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_lineContext code_line(int i) {
			return GetRuleContext<Code_lineContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			openedblock();
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32993940531074L) != 0)) {
				{
				State = 89;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR_LOOP:
				case WHILE_LOOP:
					{
					State = 86;
					loop();
					}
					break;
				case IF:
					{
					State = 87;
					if_statement();
					}
					break;
				case OPENPTHS:
				case INTEGER_TYPE:
				case FLOAT_TYPE:
				case DOUBLE_TYPE:
				case STRING_TYPE:
				case RETURN:
				case INCREMENT:
				case DECREMENT:
				case NOT:
				case NAME:
				case INTEGER_VALUE:
				case FLOAT_VALUE:
				case STRING_VALUE:
					{
					State = 88;
					code_line();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 94;
			closedblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenedblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENEDBLOCK() { return GetToken(CustomLanguageParser.OPENEDBLOCK, 0); }
		public OpenedblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openedblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenedblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenedblockContext openedblock() {
		OpenedblockContext _localctx = new OpenedblockContext(Context, State);
		EnterRule(_localctx, 12, RULE_openedblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(OPENEDBLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosedblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEDBLOCK() { return GetToken(CustomLanguageParser.CLOSEDBLOCK, 0); }
		public ClosedblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closedblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosedblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosedblockContext closedblock() {
		ClosedblockContext _localctx = new ClosedblockContext(Context, State);
		EnterRule(_localctx, 14, RULE_closedblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(CLOSEDBLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CustomLanguageParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_statementsContext other_statements() {
			return GetRuleContext<Other_statementsContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(IF);
			State = 101;
			Match(OPENPTHS);
			State = 102;
			instruction(0);
			State = 103;
			Match(CLOSEPTHS);
			State = 104;
			body();
			State = 105;
			other_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_statementContext[] else_if_statement() {
			return GetRuleContexts<Else_if_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_statementContext else_if_statement(int i) {
			return GetRuleContext<Else_if_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		public Other_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_statementsContext other_statements() {
		Other_statementsContext _localctx = new Other_statementsContext(Context, State);
		EnterRule(_localctx, 18, RULE_other_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSE_IF) {
				{
				{
				State = 107;
				else_if_statement();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 113;
				else_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_IF() { return GetToken(CustomLanguageParser.ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Else_if_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statementContext else_if_statement() {
		Else_if_statementContext _localctx = new Else_if_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_else_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(ELSE_IF);
			State = 117;
			Match(OPENPTHS);
			State = 118;
			instruction(0);
			State = 119;
			Match(CLOSEPTHS);
			State = 120;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CustomLanguageParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_else_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(ELSE);
			State = 123;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_LOOP() { return GetToken(CustomLanguageParser.FOR_LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CustomLanguageParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CustomLanguageParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_LOOP() { return GetToken(CustomLanguageParser.WHILE_LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 24, RULE_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_LOOP:
				{
				{
				State = 125;
				Match(FOR_LOOP);
				State = 126;
				Match(OPENPTHS);
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) {
					{
					State = 127;
					var_decl();
					}
				}

				State = 130;
				Match(SEMICOLON);
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32993940340738L) != 0)) {
					{
					State = 131;
					instruction(0);
					}
				}

				State = 134;
				Match(SEMICOLON);
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32993940340738L) != 0)) {
					{
					State = 135;
					instruction(0);
					}
				}

				State = 138;
				Match(CLOSEPTHS);
				}
				}
				break;
			case WHILE_LOOP:
				{
				{
				State = 139;
				Match(WHILE_LOOP);
				State = 140;
				Match(OPENPTHS);
				State = 141;
				instruction(0);
				State = 142;
				Match(CLOSEPTHS);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 146;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_lineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CustomLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributionContext attribution() {
			return GetRuleContext<AttributionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public Code_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_lineContext code_line() {
		Code_lineContext _localctx = new Code_lineContext(Context, State);
		EnterRule(_localctx, 26, RULE_code_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 148;
				attribution();
				}
				break;
			case 2:
				{
				State = 149;
				instruction(0);
				}
				break;
			case 3:
				{
				State = 150;
				@return();
				}
				break;
			case 4:
				{
				State = 151;
				var_decl();
				}
				break;
			}
			State = 154;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CustomLanguageParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 28, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(RETURN);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32993940340738L) != 0)) {
				{
				State = 157;
				instruction(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributionContext : ParserRuleContext {
		public AttributionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribution; } }
	 
		public AttributionContext() { }
		public virtual void CopyFrom(AttributionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubtractThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQSUB() { return GetToken(CustomLanguageParser.EQSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public SubtractThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQDIV() { return GetToken(CustomLanguageParser.EQDIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public DivideThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AditionThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQADD() { return GetToken(CustomLanguageParser.EQADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public AditionThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAditionThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQMOD() { return GetToken(CustomLanguageParser.EQMOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ModuloThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQMUL() { return GetToken(CustomLanguageParser.EQMUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public MultiplyThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(CustomLanguageParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public EqualExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributionContext attribution() {
		AttributionContext _localctx = new AttributionContext(Context, State);
		EnterRule(_localctx, 30, RULE_attribution);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new AditionThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 160;
				name();
				State = 161;
				Match(EQADD);
				State = 162;
				instruction(0);
				}
				break;
			case 2:
				_localctx = new SubtractThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				name();
				State = 165;
				Match(EQSUB);
				State = 166;
				instruction(0);
				}
				break;
			case 3:
				_localctx = new MultiplyThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 168;
				name();
				State = 169;
				Match(EQMUL);
				State = 170;
				instruction(0);
				}
				break;
			case 4:
				_localctx = new DivideThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 172;
				name();
				State = 173;
				Match(EQDIV);
				State = 174;
				instruction(0);
				}
				break;
			case 5:
				_localctx = new ModuloThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 176;
				name();
				State = 177;
				Match(EQMOD);
				State = 178;
				instruction(0);
				}
				break;
			case 6:
				_localctx = new EqualExpContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 180;
				name();
				State = 181;
				Match(EQUAL);
				State = 182;
				instruction(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Init_paramContext init_param() {
			return GetRuleContext<Init_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_paramContext[] other_param() {
			return GetRuleContexts<Other_paramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_paramContext other_param(int i) {
			return GetRuleContext<Other_paramContext>(i);
		}
		public Param_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_declContext param_decl() {
		Param_declContext _localctx = new Param_declContext(Context, State);
		EnterRule(_localctx, 32, RULE_param_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) {
				{
				State = 186;
				init_param();
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 187;
					other_param();
					}
					}
					State = 192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CustomLanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Init_paramContext init_param() {
			return GetRuleContext<Init_paramContext>(0);
		}
		public Other_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_paramContext other_param() {
		Other_paramContext _localctx = new Other_paramContext(Context, State);
		EnterRule(_localctx, 34, RULE_other_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(COMMA);
			State = 196;
			init_param();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Init_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_paramContext init_param() {
		Init_paramContext _localctx = new Init_paramContext(Context, State);
		EnterRule(_localctx, 36, RULE_init_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			data_type();
			State = 199;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Init_varContext init_var() {
			return GetRuleContext<Init_varContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_varContext[] other_var() {
			return GetRuleContexts<Other_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_varContext other_var(int i) {
			return GetRuleContext<Other_varContext>(i);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 38, RULE_var_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			data_type();
			State = 202;
			init_var();
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 203;
				other_var();
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CustomLanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Init_varContext init_var() {
			return GetRuleContext<Init_varContext>(0);
		}
		public Other_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_varContext other_var() {
		Other_varContext _localctx = new Other_varContext(Context, State);
		EnterRule(_localctx, 40, RULE_other_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(COMMA);
			State = 210;
			init_var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(CustomLanguageParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public Init_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_varContext init_var() {
		Init_varContext _localctx = new Init_varContext(Context, State);
		EnterRule(_localctx, 42, RULE_init_var);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			name();
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 213;
				Match(EQUAL);
				State = 214;
				instruction(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
	 
		public InstructionContext() { }
		public virtual void CopyFrom(InstructionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SmallerEqExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER_EQ() { return GetToken(CustomLanguageParser.SMALLER_EQ, 0); }
		public SmallerEqExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreincrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(CustomLanguageParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public PreincrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreincrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAtomExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VariableAtomExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueAtomEXpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_valueContext data_value() {
			return GetRuleContext<Data_valueContext>(0);
		}
		public ValueAtomEXpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueAtomEXp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredecrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(CustomLanguageParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public PredecrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredecrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicNotExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(CustomLanguageParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public LogicNotExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicNotExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Instruction_listContext instruction_list() {
			return GetRuleContext<Instruction_listContext>(0);
		}
		public FunctionCallExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostdecrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(CustomLanguageParser.DECREMENT, 0); }
		public PostdecrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostdecrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(CustomLanguageParser.MOD, 0); }
		public ModuloExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterEqExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQ() { return GetToken(CustomLanguageParser.GREATER_EQ, 0); }
		public GreaterEqExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallerExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER() { return GetToken(CustomLanguageParser.SMALLER, 0); }
		public SmallerExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(CustomLanguageParser.GREATER, 0); }
		public GreaterExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicAndExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(CustomLanguageParser.AND, 0); }
		public LogicAndExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAndExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicOrExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(CustomLanguageParser.OR, 0); }
		public LogicOrExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParanhesisExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPTHS() { return GetToken(CustomLanguageParser.OPENPTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPTHS() { return GetToken(CustomLanguageParser.CLOSEPTHS, 0); }
		public ParanhesisExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParanhesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(CustomLanguageParser.SUB, 0); }
		public SubtractExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SameValueExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAME() { return GetToken(CustomLanguageParser.SAME, 0); }
		public SameValueExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSameValueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DiffValueExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFF() { return GetToken(CustomLanguageParser.DIFF, 0); }
		public DiffValueExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiffValueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(CustomLanguageParser.MUL, 0); }
		public MultiplyExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(CustomLanguageParser.DIV, 0); }
		public DivideExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AditionExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(CustomLanguageParser.ADD, 0); }
		public AditionExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAditionExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostincrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(CustomLanguageParser.INCREMENT, 0); }
		public PostincrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostincrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		return instruction(0);
	}

	private InstructionContext instruction(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InstructionContext _localctx = new InstructionContext(Context, _parentState);
		InstructionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_instruction, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				_localctx = new VariableAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 218;
				name();
				}
				break;
			case 2:
				{
				_localctx = new ValueAtomEXpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 219;
				data_value();
				}
				break;
			case 3:
				{
				_localctx = new ParanhesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 220;
				Match(OPENPTHS);
				State = 221;
				instruction(0);
				State = 222;
				Match(CLOSEPTHS);
				}
				break;
			case 4:
				{
				_localctx = new FunctionCallExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 224;
				name();
				State = 225;
				Match(OPENPTHS);
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32993940340738L) != 0)) {
					{
					State = 226;
					instruction_list();
					}
				}

				State = 229;
				Match(CLOSEPTHS);
				}
				break;
			case 5:
				{
				_localctx = new LogicNotExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 231;
				Match(NOT);
				State = 232;
				instruction(18);
				}
				break;
			case 6:
				{
				_localctx = new PreincrementExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 233;
				Match(INCREMENT);
				State = 234;
				instruction(17);
				}
				break;
			case 7:
				{
				_localctx = new PredecrementExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 235;
				Match(DECREMENT);
				State = 236;
				instruction(15);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 284;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 282;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						_localctx = new AditionExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 239;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 240;
						Match(ADD);
						State = 241;
						instruction(14);
						}
						break;
					case 2:
						{
						_localctx = new SubtractExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 242;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 243;
						Match(SUB);
						State = 244;
						instruction(13);
						}
						break;
					case 3:
						{
						_localctx = new MultiplyExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 245;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 246;
						Match(MUL);
						State = 247;
						instruction(12);
						}
						break;
					case 4:
						{
						_localctx = new DivideExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 248;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 249;
						Match(DIV);
						State = 250;
						instruction(11);
						}
						break;
					case 5:
						{
						_localctx = new ModuloExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 251;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 252;
						Match(MOD);
						State = 253;
						instruction(10);
						}
						break;
					case 6:
						{
						_localctx = new SmallerEqExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 254;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 255;
						Match(SMALLER_EQ);
						State = 256;
						instruction(9);
						}
						break;
					case 7:
						{
						_localctx = new GreaterEqExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 257;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 258;
						Match(GREATER_EQ);
						State = 259;
						instruction(8);
						}
						break;
					case 8:
						{
						_localctx = new SmallerExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 260;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 261;
						Match(SMALLER);
						State = 262;
						instruction(7);
						}
						break;
					case 9:
						{
						_localctx = new GreaterExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 263;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 264;
						Match(GREATER);
						State = 265;
						instruction(6);
						}
						break;
					case 10:
						{
						_localctx = new SameValueExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 266;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 267;
						Match(SAME);
						State = 268;
						instruction(5);
						}
						break;
					case 11:
						{
						_localctx = new DiffValueExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 269;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 270;
						Match(DIFF);
						State = 271;
						instruction(4);
						}
						break;
					case 12:
						{
						_localctx = new LogicAndExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 272;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 273;
						Match(AND);
						State = 274;
						instruction(3);
						}
						break;
					case 13:
						{
						_localctx = new LogicOrExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 275;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 276;
						Match(OR);
						State = 277;
						instruction(2);
						}
						break;
					case 14:
						{
						_localctx = new PostincrementExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 278;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 279;
						Match(INCREMENT);
						}
						break;
					case 15:
						{
						_localctx = new PostdecrementExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 280;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 281;
						Match(DECREMENT);
						}
						break;
					}
					} 
				}
				State = 286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Instruction_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_instructionsContext[] other_instructions() {
			return GetRuleContexts<Other_instructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_instructionsContext other_instructions(int i) {
			return GetRuleContext<Other_instructionsContext>(i);
		}
		public Instruction_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_listContext instruction_list() {
		Instruction_listContext _localctx = new Instruction_listContext(Context, State);
		EnterRule(_localctx, 46, RULE_instruction_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			instruction(0);
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 288;
				other_instructions();
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_instructionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CustomLanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public Other_instructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_instructions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_instructions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_instructionsContext other_instructions() {
		Other_instructionsContext _localctx = new Other_instructionsContext(Context, State);
		EnterRule(_localctx, 48, RULE_other_instructions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(COMMA);
			State = 295;
			instruction(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_TYPE() { return GetToken(CustomLanguageParser.VOID_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_TYPE() { return GetToken(CustomLanguageParser.INTEGER_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(CustomLanguageParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(CustomLanguageParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(CustomLanguageParser.STRING_TYPE, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 50, RULE_return_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3968L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_TYPE() { return GetToken(CustomLanguageParser.INTEGER_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(CustomLanguageParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(CustomLanguageParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(CustomLanguageParser.STRING_TYPE, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 52, RULE_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_VALUE() { return GetToken(CustomLanguageParser.FLOAT_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(CustomLanguageParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(CustomLanguageParser.STRING_VALUE, 0); }
		public Data_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_valueContext data_value() {
		Data_valueContext _localctx = new Data_valueContext(Context, State);
		EnterRule(_localctx, 54, RULE_data_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30786325577728L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 56, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 22: return instruction_sempred((InstructionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool instruction_sempred(InstructionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		case 13: return Precpred(Context, 16);
		case 14: return Precpred(Context, 14);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,47,306,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,5,2,71,8,2,10,2,12,2,74,
		9,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,90,8,5,
		10,5,12,5,93,9,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		9,5,9,109,8,9,10,9,12,9,112,9,9,1,9,3,9,115,8,9,1,10,1,10,1,10,1,10,1,
		10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,3,12,129,8,12,1,12,1,12,3,12,133,
		8,12,1,12,1,12,3,12,137,8,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,145,8,
		12,1,12,1,12,1,13,1,13,1,13,1,13,3,13,153,8,13,1,13,1,13,1,14,1,14,3,14,
		159,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,185,8,15,
		1,16,1,16,5,16,189,8,16,10,16,12,16,192,9,16,3,16,194,8,16,1,17,1,17,1,
		17,1,18,1,18,1,18,1,19,1,19,1,19,5,19,205,8,19,10,19,12,19,208,9,19,1,
		20,1,20,1,20,1,21,1,21,1,21,3,21,216,8,21,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,3,22,228,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,3,22,238,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,5,22,283,8,22,10,22,12,22,286,9,22,1,23,1,23,5,23,
		290,8,23,10,23,12,23,293,9,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
		1,27,1,28,1,28,1,28,0,1,44,29,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,0,3,1,0,7,11,1,0,7,10,1,0,42,
		44,323,0,58,1,0,0,0,2,61,1,0,0,0,4,72,1,0,0,0,6,75,1,0,0,0,8,78,1,0,0,
		0,10,85,1,0,0,0,12,96,1,0,0,0,14,98,1,0,0,0,16,100,1,0,0,0,18,110,1,0,
		0,0,20,116,1,0,0,0,22,122,1,0,0,0,24,144,1,0,0,0,26,152,1,0,0,0,28,156,
		1,0,0,0,30,184,1,0,0,0,32,193,1,0,0,0,34,195,1,0,0,0,36,198,1,0,0,0,38,
		201,1,0,0,0,40,209,1,0,0,0,42,212,1,0,0,0,44,237,1,0,0,0,46,287,1,0,0,
		0,48,294,1,0,0,0,50,297,1,0,0,0,52,299,1,0,0,0,54,301,1,0,0,0,56,303,1,
		0,0,0,58,59,3,4,2,0,59,60,3,2,1,0,60,1,1,0,0,0,61,62,3,50,25,0,62,63,5,
		12,0,0,63,64,5,1,0,0,64,65,3,32,16,0,65,66,5,2,0,0,66,67,3,10,5,0,67,3,
		1,0,0,0,68,71,3,8,4,0,69,71,3,6,3,0,70,68,1,0,0,0,70,69,1,0,0,0,71,74,
		1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,5,1,0,0,0,74,72,1,0,0,0,75,76,3,
		38,19,0,76,77,5,6,0,0,77,7,1,0,0,0,78,79,3,50,25,0,79,80,5,41,0,0,80,81,
		5,1,0,0,81,82,3,32,16,0,82,83,5,2,0,0,83,84,3,10,5,0,84,9,1,0,0,0,85,91,
		3,12,6,0,86,90,3,24,12,0,87,90,3,16,8,0,88,90,3,26,13,0,89,86,1,0,0,0,
		89,87,1,0,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,
		92,94,1,0,0,0,93,91,1,0,0,0,94,95,3,14,7,0,95,11,1,0,0,0,96,97,5,3,0,0,
		97,13,1,0,0,0,98,99,5,4,0,0,99,15,1,0,0,0,100,101,5,17,0,0,101,102,5,1,
		0,0,102,103,3,44,22,0,103,104,5,2,0,0,104,105,3,10,5,0,105,106,3,18,9,
		0,106,17,1,0,0,0,107,109,3,20,10,0,108,107,1,0,0,0,109,112,1,0,0,0,110,
		108,1,0,0,0,110,111,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,113,115,3,
		22,11,0,114,113,1,0,0,0,114,115,1,0,0,0,115,19,1,0,0,0,116,117,5,16,0,
		0,117,118,5,1,0,0,118,119,3,44,22,0,119,120,5,2,0,0,120,121,3,10,5,0,121,
		21,1,0,0,0,122,123,5,18,0,0,123,124,3,10,5,0,124,23,1,0,0,0,125,126,5,
		14,0,0,126,128,5,1,0,0,127,129,3,38,19,0,128,127,1,0,0,0,128,129,1,0,0,
		0,129,130,1,0,0,0,130,132,5,6,0,0,131,133,3,44,22,0,132,131,1,0,0,0,132,
		133,1,0,0,0,133,134,1,0,0,0,134,136,5,6,0,0,135,137,3,44,22,0,136,135,
		1,0,0,0,136,137,1,0,0,0,137,138,1,0,0,0,138,145,5,2,0,0,139,140,5,15,0,
		0,140,141,5,1,0,0,141,142,3,44,22,0,142,143,5,2,0,0,143,145,1,0,0,0,144,
		125,1,0,0,0,144,139,1,0,0,0,145,146,1,0,0,0,146,147,3,10,5,0,147,25,1,
		0,0,0,148,153,3,30,15,0,149,153,3,44,22,0,150,153,3,28,14,0,151,153,3,
		38,19,0,152,148,1,0,0,0,152,149,1,0,0,0,152,150,1,0,0,0,152,151,1,0,0,
		0,153,154,1,0,0,0,154,155,5,6,0,0,155,27,1,0,0,0,156,158,5,13,0,0,157,
		159,3,44,22,0,158,157,1,0,0,0,158,159,1,0,0,0,159,29,1,0,0,0,160,161,3,
		56,28,0,161,162,5,35,0,0,162,163,3,44,22,0,163,185,1,0,0,0,164,165,3,56,
		28,0,165,166,5,36,0,0,166,167,3,44,22,0,167,185,1,0,0,0,168,169,3,56,28,
		0,169,170,5,37,0,0,170,171,3,44,22,0,171,185,1,0,0,0,172,173,3,56,28,0,
		173,174,5,38,0,0,174,175,3,44,22,0,175,185,1,0,0,0,176,177,3,56,28,0,177,
		178,5,39,0,0,178,179,3,44,22,0,179,185,1,0,0,0,180,181,3,56,28,0,181,182,
		5,40,0,0,182,183,3,44,22,0,183,185,1,0,0,0,184,160,1,0,0,0,184,164,1,0,
		0,0,184,168,1,0,0,0,184,172,1,0,0,0,184,176,1,0,0,0,184,180,1,0,0,0,185,
		31,1,0,0,0,186,190,3,36,18,0,187,189,3,34,17,0,188,187,1,0,0,0,189,192,
		1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,
		0,193,186,1,0,0,0,193,194,1,0,0,0,194,33,1,0,0,0,195,196,5,5,0,0,196,197,
		3,36,18,0,197,35,1,0,0,0,198,199,3,52,26,0,199,200,3,56,28,0,200,37,1,
		0,0,0,201,202,3,52,26,0,202,206,3,42,21,0,203,205,3,40,20,0,204,203,1,
		0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,39,1,0,0,0,208,
		206,1,0,0,0,209,210,5,5,0,0,210,211,3,42,21,0,211,41,1,0,0,0,212,215,3,
		56,28,0,213,214,5,40,0,0,214,216,3,44,22,0,215,213,1,0,0,0,215,216,1,0,
		0,0,216,43,1,0,0,0,217,218,6,22,-1,0,218,238,3,56,28,0,219,238,3,54,27,
		0,220,221,5,1,0,0,221,222,3,44,22,0,222,223,5,2,0,0,223,238,1,0,0,0,224,
		225,3,56,28,0,225,227,5,1,0,0,226,228,3,46,23,0,227,226,1,0,0,0,227,228,
		1,0,0,0,228,229,1,0,0,0,229,230,5,2,0,0,230,238,1,0,0,0,231,232,5,33,0,
		0,232,238,3,44,22,18,233,234,5,19,0,0,234,238,3,44,22,17,235,236,5,20,
		0,0,236,238,3,44,22,15,237,217,1,0,0,0,237,219,1,0,0,0,237,220,1,0,0,0,
		237,224,1,0,0,0,237,231,1,0,0,0,237,233,1,0,0,0,237,235,1,0,0,0,238,284,
		1,0,0,0,239,240,10,13,0,0,240,241,5,23,0,0,241,283,3,44,22,14,242,243,
		10,12,0,0,243,244,5,24,0,0,244,283,3,44,22,13,245,246,10,11,0,0,246,247,
		5,21,0,0,247,283,3,44,22,12,248,249,10,10,0,0,249,250,5,22,0,0,250,283,
		3,44,22,11,251,252,10,9,0,0,252,253,5,25,0,0,253,283,3,44,22,10,254,255,
		10,8,0,0,255,256,5,26,0,0,256,283,3,44,22,9,257,258,10,7,0,0,258,259,5,
		27,0,0,259,283,3,44,22,8,260,261,10,6,0,0,261,262,5,30,0,0,262,283,3,44,
		22,7,263,264,10,5,0,0,264,265,5,31,0,0,265,283,3,44,22,6,266,267,10,4,
		0,0,267,268,5,28,0,0,268,283,3,44,22,5,269,270,10,3,0,0,270,271,5,29,0,
		0,271,283,3,44,22,4,272,273,10,2,0,0,273,274,5,32,0,0,274,283,3,44,22,
		3,275,276,10,1,0,0,276,277,5,34,0,0,277,283,3,44,22,2,278,279,10,16,0,
		0,279,283,5,19,0,0,280,281,10,14,0,0,281,283,5,20,0,0,282,239,1,0,0,0,
		282,242,1,0,0,0,282,245,1,0,0,0,282,248,1,0,0,0,282,251,1,0,0,0,282,254,
		1,0,0,0,282,257,1,0,0,0,282,260,1,0,0,0,282,263,1,0,0,0,282,266,1,0,0,
		0,282,269,1,0,0,0,282,272,1,0,0,0,282,275,1,0,0,0,282,278,1,0,0,0,282,
		280,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,45,1,0,
		0,0,286,284,1,0,0,0,287,291,3,44,22,0,288,290,3,48,24,0,289,288,1,0,0,
		0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,47,1,0,0,0,293,291,
		1,0,0,0,294,295,5,5,0,0,295,296,3,44,22,0,296,49,1,0,0,0,297,298,7,0,0,
		0,298,51,1,0,0,0,299,300,7,1,0,0,300,53,1,0,0,0,301,302,7,2,0,0,302,55,
		1,0,0,0,303,304,5,41,0,0,304,57,1,0,0,0,22,70,72,89,91,110,114,128,132,
		136,144,152,158,184,190,193,206,215,227,237,282,284,291
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
