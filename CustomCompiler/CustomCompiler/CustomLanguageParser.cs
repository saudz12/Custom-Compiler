//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/UNIV/ANUL_II/LFC - Limbaje Formale si Compilatoare/Custom-Compiler/CustomCompiler/CustomCompiler/CustomLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CustomLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, INTEGER_TYPE=6, FLOAT_TYPE=7, 
		DOUBLE_TYPE=8, STRING_TYPE=9, VOID_TYPE=10, MAIN_FUNC=11, RETURN=12, FOR_LOOP=13, 
		WHILE_LOOP=14, ELSE_IF=15, IF=16, ELSE=17, INCREMENT=18, DECREMENT=19, 
		SEMICOLON=20, MUL=21, DIV=22, ADD=23, SUB=24, MOD=25, SMALLER_EQ=26, GREATER_EQ=27, 
		SAME=28, DIFF=29, SMALLER=30, GREATER=31, AND=32, NOT=33, OR=34, EQADD=35, 
		EQSUB=36, EQMUL=37, EQDIV=38, EQMOD=39, EQUAL=40, NAME=41, INTEGER_VALUE=42, 
		FLOAT_VALUE=43, STRING_VALUE=44, BLOCK_COMMENTARY=45, LINE_COMMENTARY=46, 
		WS=47;
	public const int
		RULE_base_structure = 0, RULE_main = 1, RULE_global = 2, RULE_func_decl = 3, 
		RULE_body = 4, RULE_if_statement = 5, RULE_other_statements = 6, RULE_else_if_statement = 7, 
		RULE_else_statement = 8, RULE_loop = 9, RULE_return = 10, RULE_attribution = 11, 
		RULE_param_decl = 12, RULE_var_decl = 13, RULE_instruction = 14, RULE_return_type = 15, 
		RULE_data_type = 16, RULE_data_value = 17, RULE_name = 18;
	public static readonly string[] ruleNames = {
		"base_structure", "main", "global", "func_decl", "body", "if_statement", 
		"other_statements", "else_if_statement", "else_statement", "loop", "return", 
		"attribution", "param_decl", "var_decl", "instruction", "return_type", 
		"data_type", "data_value", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "','", "'int'", "'float'", "'double'", 
		"'string'", "'void'", "'main'", "'return'", "'for'", "'while'", "'else if'", 
		"'if'", "'else'", "'++'", "'--'", "';'", "'*'", "'/'", "'+'", "'-'", "'%'", 
		"'<='", "'>='", "'=='", "'!='", "'<'", "'>'", "'&&'", "'!'", "'||'", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "INTEGER_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", 
		"STRING_TYPE", "VOID_TYPE", "MAIN_FUNC", "RETURN", "FOR_LOOP", "WHILE_LOOP", 
		"ELSE_IF", "IF", "ELSE", "INCREMENT", "DECREMENT", "SEMICOLON", "MUL", 
		"DIV", "ADD", "SUB", "MOD", "SMALLER_EQ", "GREATER_EQ", "SAME", "DIFF", 
		"SMALLER", "GREATER", "AND", "NOT", "OR", "EQADD", "EQSUB", "EQMUL", "EQDIV", 
		"EQMOD", "EQUAL", "NAME", "INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", 
		"BLOCK_COMMENTARY", "LINE_COMMENTARY", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CustomLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CustomLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CustomLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CustomLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Base_structureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalContext global() {
			return GetRuleContext<GlobalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public Base_structureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_structure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_structure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_structureContext base_structure() {
		Base_structureContext _localctx = new Base_structureContext(Context, State);
		EnterRule(_localctx, 0, RULE_base_structure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			global();
			State = 39;
			main();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN_FUNC() { return GetToken(CustomLanguageParser.MAIN_FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			data_type();
			State = 42;
			Match(MAIN_FUNC);
			State = 43;
			Match(T__0);
			State = 44;
			Match(T__1);
			State = 45;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext[] func_decl() {
			return GetRuleContexts<Func_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext func_decl(int i) {
			return GetRuleContext<Func_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext[] var_decl() {
			return GetRuleContexts<Var_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl(int i) {
			return GetRuleContext<Var_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CustomLanguageParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CustomLanguageParser.SEMICOLON, i);
		}
		public GlobalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalContext global() {
		GlobalContext _localctx = new GlobalContext(Context, State);
		EnterRule(_localctx, 4, RULE_global);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 51;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 47;
						func_decl();
						}
						break;
					case 2:
						{
						{
						State = 48;
						var_decl();
						State = 49;
						Match(SEMICOLON);
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 53;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_declContext param_decl() {
			return GetRuleContext<Param_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Func_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_declContext func_decl() {
		Func_declContext _localctx = new Func_declContext(Context, State);
		EnterRule(_localctx, 6, RULE_func_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			return_type();
			State = 56;
			name();
			State = 57;
			Match(T__0);
			State = 58;
			param_decl();
			State = 59;
			Match(T__1);
			State = 60;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext[] loop() {
			return GetRuleContexts<LoopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop(int i) {
			return GetRuleContext<LoopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext[] if_statement() {
			return GetRuleContexts<If_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement(int i) {
			return GetRuleContext<If_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributionContext[] attribution() {
			return GetRuleContexts<AttributionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributionContext attribution(int i) {
			return GetRuleContext<AttributionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CustomLanguageParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CustomLanguageParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext[] @return() {
			return GetRuleContexts<ReturnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return(int i) {
			return GetRuleContext<ReturnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext[] var_decl() {
			return GetRuleContexts<Var_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl(int i) {
			return GetRuleContext<Var_declContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(T__2);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32993939649474L) != 0)) {
				{
				State = 77;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 63;
					loop();
					}
					break;
				case 2:
					{
					State = 64;
					if_statement();
					}
					break;
				case 3:
					{
					State = 65;
					attribution();
					State = 66;
					Match(SEMICOLON);
					}
					break;
				case 4:
					{
					State = 68;
					instruction(0);
					State = 69;
					Match(SEMICOLON);
					}
					break;
				case 5:
					{
					State = 71;
					@return();
					State = 72;
					Match(SEMICOLON);
					}
					break;
				case 6:
					{
					State = 74;
					var_decl();
					State = 75;
					Match(SEMICOLON);
					}
					break;
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CustomLanguageParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_statementsContext other_statements() {
			return GetRuleContext<Other_statementsContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(IF);
			State = 85;
			Match(T__0);
			State = 86;
			instruction(0);
			State = 87;
			Match(T__1);
			State = 88;
			other_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_statementContext else_if_statement() {
			return GetRuleContext<Else_if_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		public Other_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_statementsContext other_statements() {
		Other_statementsContext _localctx = new Other_statementsContext(Context, State);
		EnterRule(_localctx, 12, RULE_other_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 90;
				body();
				State = 91;
				else_if_statement();
				State = 92;
				else_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE_IF() { return GetTokens(CustomLanguageParser.ELSE_IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_IF(int i) {
			return GetToken(CustomLanguageParser.ELSE_IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext[] body() {
			return GetRuleContexts<BodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body(int i) {
			return GetRuleContext<BodyContext>(i);
		}
		public Else_if_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statementContext else_if_statement() {
		Else_if_statementContext _localctx = new Else_if_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_else_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSE_IF) {
				{
				{
				State = 96;
				Match(ELSE_IF);
				State = 97;
				Match(T__0);
				State = 98;
				instruction(0);
				State = 99;
				Match(T__1);
				State = 100;
				body();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CustomLanguageParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_else_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 107;
				Match(ELSE);
				State = 108;
				body();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_LOOP() { return GetToken(CustomLanguageParser.FOR_LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CustomLanguageParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CustomLanguageParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_LOOP() { return GetToken(CustomLanguageParser.WHILE_LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 18, RULE_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_LOOP:
				{
				{
				State = 111;
				Match(FOR_LOOP);
				State = 112;
				Match(T__0);
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 960L) != 0)) {
					{
					State = 113;
					var_decl();
					}
				}

				State = 116;
				Match(SEMICOLON);
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32993939554306L) != 0)) {
					{
					State = 117;
					instruction(0);
					}
				}

				State = 120;
				Match(SEMICOLON);
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32993939554306L) != 0)) {
					{
					State = 121;
					instruction(0);
					}
				}

				State = 124;
				Match(T__1);
				}
				}
				break;
			case WHILE_LOOP:
				{
				{
				State = 125;
				Match(WHILE_LOOP);
				State = 126;
				Match(T__0);
				State = 127;
				instruction(0);
				State = 128;
				Match(T__1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 132;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CustomLanguageParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 20, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(RETURN);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32993939554306L) != 0)) {
				{
				State = 135;
				instruction(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributionContext : ParserRuleContext {
		public AttributionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribution; } }
	 
		public AttributionContext() { }
		public virtual void CopyFrom(AttributionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubtractThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQSUB() { return GetToken(CustomLanguageParser.EQSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public SubtractThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQDIV() { return GetToken(CustomLanguageParser.EQDIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public DivideThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AditionThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQADD() { return GetToken(CustomLanguageParser.EQADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public AditionThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAditionThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQMOD() { return GetToken(CustomLanguageParser.EQMOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ModuloThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyThenEqExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQMUL() { return GetToken(CustomLanguageParser.EQMUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public MultiplyThenEqExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyThenEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualExpContext : AttributionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(CustomLanguageParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public EqualExpContext(AttributionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributionContext attribution() {
		AttributionContext _localctx = new AttributionContext(Context, State);
		EnterRule(_localctx, 22, RULE_attribution);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new AditionThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				name();
				State = 139;
				Match(EQADD);
				State = 140;
				instruction(0);
				}
				break;
			case 2:
				_localctx = new SubtractThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				name();
				State = 143;
				Match(EQSUB);
				State = 144;
				instruction(0);
				}
				break;
			case 3:
				_localctx = new MultiplyThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				name();
				State = 147;
				Match(EQMUL);
				State = 148;
				instruction(0);
				}
				break;
			case 4:
				_localctx = new DivideThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 150;
				name();
				State = 151;
				Match(EQDIV);
				State = 152;
				instruction(0);
				}
				break;
			case 5:
				_localctx = new ModuloThenEqExpContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 154;
				name();
				State = 155;
				Match(EQMOD);
				State = 156;
				instruction(0);
				}
				break;
			case 6:
				_localctx = new EqualExpContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 158;
				name();
				State = 159;
				Match(EQUAL);
				State = 160;
				instruction(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext[] data_type() {
			return GetRuleContexts<Data_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type(int i) {
			return GetRuleContext<Data_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Param_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_declContext param_decl() {
		Param_declContext _localctx = new Param_declContext(Context, State);
		EnterRule(_localctx, 24, RULE_param_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 960L) != 0)) {
				{
				State = 164;
				data_type();
				State = 165;
				name();
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 166;
					Match(T__4);
					State = 167;
					data_type();
					State = 168;
					name();
					}
					}
					State = 174;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(CustomLanguageParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(CustomLanguageParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 26, RULE_var_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			data_type();
			State = 178;
			name();
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 179;
				Match(EQUAL);
				State = 180;
				instruction(0);
				}
			}

			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 183;
				Match(T__4);
				State = 184;
				name();
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL) {
					{
					State = 185;
					Match(EQUAL);
					State = 186;
					instruction(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
	 
		public InstructionContext() { }
		public virtual void CopyFrom(InstructionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SmallerEqExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER_EQ() { return GetToken(CustomLanguageParser.SMALLER_EQ, 0); }
		public SmallerEqExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreincrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(CustomLanguageParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public PreincrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreincrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAtomExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VariableAtomExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueAtomEXpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_valueContext data_value() {
			return GetRuleContext<Data_valueContext>(0);
		}
		public ValueAtomEXpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueAtomEXp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredecrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(CustomLanguageParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public PredecrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredecrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicNotExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(CustomLanguageParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public LogicNotExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicNotExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public FunctionCallExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostdecrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(CustomLanguageParser.DECREMENT, 0); }
		public PostdecrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostdecrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(CustomLanguageParser.MOD, 0); }
		public ModuloExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterEqExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQ() { return GetToken(CustomLanguageParser.GREATER_EQ, 0); }
		public GreaterEqExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterEqExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallerExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER() { return GetToken(CustomLanguageParser.SMALLER, 0); }
		public SmallerExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(CustomLanguageParser.GREATER, 0); }
		public GreaterExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicAndExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(CustomLanguageParser.AND, 0); }
		public LogicAndExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAndExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicOrExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(CustomLanguageParser.OR, 0); }
		public LogicOrExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParanhesisExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ParanhesisExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParanhesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(CustomLanguageParser.SUB, 0); }
		public SubtractExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SameValueExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAME() { return GetToken(CustomLanguageParser.SAME, 0); }
		public SameValueExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSameValueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DiffValueExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFF() { return GetToken(CustomLanguageParser.DIFF, 0); }
		public DiffValueExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiffValueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(CustomLanguageParser.MUL, 0); }
		public MultiplyExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(CustomLanguageParser.DIV, 0); }
		public DivideExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AditionExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(CustomLanguageParser.ADD, 0); }
		public AditionExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAditionExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostincrementExpContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(CustomLanguageParser.INCREMENT, 0); }
		public PostincrementExpContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostincrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		return instruction(0);
	}

	private InstructionContext instruction(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InstructionContext _localctx = new InstructionContext(Context, _parentState);
		InstructionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_instruction, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				_localctx = new VariableAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 192;
				name();
				}
				break;
			case 2:
				{
				_localctx = new ValueAtomEXpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 193;
				data_value();
				}
				break;
			case 3:
				{
				_localctx = new ParanhesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 194;
				Match(T__0);
				State = 195;
				instruction(0);
				State = 196;
				Match(T__1);
				}
				break;
			case 4:
				{
				_localctx = new FunctionCallExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 198;
				name();
				State = 199;
				Match(T__0);
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32993939554306L) != 0)) {
					{
					State = 200;
					instruction(0);
					State = 205;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__4) {
						{
						{
						State = 201;
						Match(T__4);
						State = 202;
						instruction(0);
						}
						}
						State = 207;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 210;
				Match(T__1);
				}
				break;
			case 5:
				{
				_localctx = new LogicNotExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 212;
				Match(NOT);
				State = 213;
				instruction(18);
				}
				break;
			case 6:
				{
				_localctx = new PreincrementExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 214;
				Match(INCREMENT);
				State = 215;
				instruction(17);
				}
				break;
			case 7:
				{
				_localctx = new PredecrementExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 216;
				Match(DECREMENT);
				State = 217;
				instruction(15);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 265;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 263;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new AditionExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 220;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 221;
						Match(ADD);
						State = 222;
						instruction(14);
						}
						break;
					case 2:
						{
						_localctx = new SubtractExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 223;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 224;
						Match(SUB);
						State = 225;
						instruction(13);
						}
						break;
					case 3:
						{
						_localctx = new MultiplyExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 226;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 227;
						Match(MUL);
						State = 228;
						instruction(12);
						}
						break;
					case 4:
						{
						_localctx = new DivideExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 229;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 230;
						Match(DIV);
						State = 231;
						instruction(11);
						}
						break;
					case 5:
						{
						_localctx = new ModuloExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 232;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 233;
						Match(MOD);
						State = 234;
						instruction(10);
						}
						break;
					case 6:
						{
						_localctx = new SmallerEqExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 235;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 236;
						Match(SMALLER_EQ);
						State = 237;
						instruction(9);
						}
						break;
					case 7:
						{
						_localctx = new GreaterEqExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 238;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 239;
						Match(GREATER_EQ);
						State = 240;
						instruction(8);
						}
						break;
					case 8:
						{
						_localctx = new SmallerExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 241;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 242;
						Match(SMALLER);
						State = 243;
						instruction(7);
						}
						break;
					case 9:
						{
						_localctx = new GreaterExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 244;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 245;
						Match(GREATER);
						State = 246;
						instruction(6);
						}
						break;
					case 10:
						{
						_localctx = new SameValueExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 247;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 248;
						Match(SAME);
						State = 249;
						instruction(5);
						}
						break;
					case 11:
						{
						_localctx = new DiffValueExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 250;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 251;
						Match(DIFF);
						State = 252;
						instruction(4);
						}
						break;
					case 12:
						{
						_localctx = new LogicAndExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 253;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 254;
						Match(AND);
						State = 255;
						instruction(3);
						}
						break;
					case 13:
						{
						_localctx = new LogicOrExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 256;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 257;
						Match(OR);
						State = 258;
						instruction(2);
						}
						break;
					case 14:
						{
						_localctx = new PostincrementExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 259;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 260;
						Match(INCREMENT);
						}
						break;
					case 15:
						{
						_localctx = new PostdecrementExpContext(new InstructionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_instruction);
						State = 261;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 262;
						Match(DECREMENT);
						}
						break;
					}
					} 
				}
				State = 267;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_TYPE() { return GetToken(CustomLanguageParser.VOID_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 30, RULE_return_type);
		try {
			State = 270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				Match(VOID_TYPE);
				}
				break;
			case INTEGER_TYPE:
			case FLOAT_TYPE:
			case DOUBLE_TYPE:
			case STRING_TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				data_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_TYPE() { return GetToken(CustomLanguageParser.INTEGER_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(CustomLanguageParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(CustomLanguageParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(CustomLanguageParser.STRING_TYPE, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 32, RULE_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 960L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_VALUE() { return GetToken(CustomLanguageParser.FLOAT_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(CustomLanguageParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(CustomLanguageParser.STRING_VALUE, 0); }
		public Data_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_valueContext data_value() {
		Data_valueContext _localctx = new Data_valueContext(Context, State);
		EnterRule(_localctx, 34, RULE_data_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30786325577728L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CustomLanguageParser.NAME, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomLanguageVisitor<TResult> typedVisitor = visitor as ICustomLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 36, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return instruction_sempred((InstructionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool instruction_sempred(InstructionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		case 13: return Precpred(Context, 16);
		case 14: return Precpred(Context, 14);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,47,279,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,2,1,2,1,2,1,2,4,2,52,8,2,11,2,12,2,53,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,78,
		8,4,10,4,12,4,81,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,3,
		6,95,8,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,103,8,7,10,7,12,7,106,9,7,1,8,1,8,
		3,8,110,8,8,1,9,1,9,1,9,3,9,115,8,9,1,9,1,9,3,9,119,8,9,1,9,1,9,3,9,123,
		8,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,131,8,9,1,9,1,9,1,10,1,10,3,10,137,8,10,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,163,8,11,1,12,1,
		12,1,12,1,12,1,12,1,12,5,12,171,8,12,10,12,12,12,174,9,12,3,12,176,8,12,
		1,13,1,13,1,13,1,13,3,13,182,8,13,1,13,1,13,1,13,1,13,3,13,188,8,13,3,
		13,190,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		5,14,204,8,14,10,14,12,14,207,9,14,3,14,209,8,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,3,14,219,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,264,8,14,10,14,12,14,267,9,14,
		1,15,1,15,3,15,271,8,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,53,1,28,19,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,0,2,1,0,6,9,1,0,42,
		44,309,0,38,1,0,0,0,2,41,1,0,0,0,4,51,1,0,0,0,6,55,1,0,0,0,8,62,1,0,0,
		0,10,84,1,0,0,0,12,94,1,0,0,0,14,104,1,0,0,0,16,109,1,0,0,0,18,130,1,0,
		0,0,20,134,1,0,0,0,22,162,1,0,0,0,24,175,1,0,0,0,26,177,1,0,0,0,28,218,
		1,0,0,0,30,270,1,0,0,0,32,272,1,0,0,0,34,274,1,0,0,0,36,276,1,0,0,0,38,
		39,3,4,2,0,39,40,3,2,1,0,40,1,1,0,0,0,41,42,3,32,16,0,42,43,5,11,0,0,43,
		44,5,1,0,0,44,45,5,2,0,0,45,46,3,8,4,0,46,3,1,0,0,0,47,52,3,6,3,0,48,49,
		3,26,13,0,49,50,5,20,0,0,50,52,1,0,0,0,51,47,1,0,0,0,51,48,1,0,0,0,52,
		53,1,0,0,0,53,54,1,0,0,0,53,51,1,0,0,0,54,5,1,0,0,0,55,56,3,30,15,0,56,
		57,3,36,18,0,57,58,5,1,0,0,58,59,3,24,12,0,59,60,5,2,0,0,60,61,3,8,4,0,
		61,7,1,0,0,0,62,79,5,3,0,0,63,78,3,18,9,0,64,78,3,10,5,0,65,66,3,22,11,
		0,66,67,5,20,0,0,67,78,1,0,0,0,68,69,3,28,14,0,69,70,5,20,0,0,70,78,1,
		0,0,0,71,72,3,20,10,0,72,73,5,20,0,0,73,78,1,0,0,0,74,75,3,26,13,0,75,
		76,5,20,0,0,76,78,1,0,0,0,77,63,1,0,0,0,77,64,1,0,0,0,77,65,1,0,0,0,77,
		68,1,0,0,0,77,71,1,0,0,0,77,74,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,
		80,1,0,0,0,80,82,1,0,0,0,81,79,1,0,0,0,82,83,5,4,0,0,83,9,1,0,0,0,84,85,
		5,16,0,0,85,86,5,1,0,0,86,87,3,28,14,0,87,88,5,2,0,0,88,89,3,12,6,0,89,
		11,1,0,0,0,90,91,3,8,4,0,91,92,3,14,7,0,92,93,3,16,8,0,93,95,1,0,0,0,94,
		90,1,0,0,0,94,95,1,0,0,0,95,13,1,0,0,0,96,97,5,15,0,0,97,98,5,1,0,0,98,
		99,3,28,14,0,99,100,5,2,0,0,100,101,3,8,4,0,101,103,1,0,0,0,102,96,1,0,
		0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,15,1,0,0,0,106,
		104,1,0,0,0,107,108,5,17,0,0,108,110,3,8,4,0,109,107,1,0,0,0,109,110,1,
		0,0,0,110,17,1,0,0,0,111,112,5,13,0,0,112,114,5,1,0,0,113,115,3,26,13,
		0,114,113,1,0,0,0,114,115,1,0,0,0,115,116,1,0,0,0,116,118,5,20,0,0,117,
		119,3,28,14,0,118,117,1,0,0,0,118,119,1,0,0,0,119,120,1,0,0,0,120,122,
		5,20,0,0,121,123,3,28,14,0,122,121,1,0,0,0,122,123,1,0,0,0,123,124,1,0,
		0,0,124,131,5,2,0,0,125,126,5,14,0,0,126,127,5,1,0,0,127,128,3,28,14,0,
		128,129,5,2,0,0,129,131,1,0,0,0,130,111,1,0,0,0,130,125,1,0,0,0,131,132,
		1,0,0,0,132,133,3,8,4,0,133,19,1,0,0,0,134,136,5,12,0,0,135,137,3,28,14,
		0,136,135,1,0,0,0,136,137,1,0,0,0,137,21,1,0,0,0,138,139,3,36,18,0,139,
		140,5,35,0,0,140,141,3,28,14,0,141,163,1,0,0,0,142,143,3,36,18,0,143,144,
		5,36,0,0,144,145,3,28,14,0,145,163,1,0,0,0,146,147,3,36,18,0,147,148,5,
		37,0,0,148,149,3,28,14,0,149,163,1,0,0,0,150,151,3,36,18,0,151,152,5,38,
		0,0,152,153,3,28,14,0,153,163,1,0,0,0,154,155,3,36,18,0,155,156,5,39,0,
		0,156,157,3,28,14,0,157,163,1,0,0,0,158,159,3,36,18,0,159,160,5,40,0,0,
		160,161,3,28,14,0,161,163,1,0,0,0,162,138,1,0,0,0,162,142,1,0,0,0,162,
		146,1,0,0,0,162,150,1,0,0,0,162,154,1,0,0,0,162,158,1,0,0,0,163,23,1,0,
		0,0,164,165,3,32,16,0,165,172,3,36,18,0,166,167,5,5,0,0,167,168,3,32,16,
		0,168,169,3,36,18,0,169,171,1,0,0,0,170,166,1,0,0,0,171,174,1,0,0,0,172,
		170,1,0,0,0,172,173,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,175,164,1,
		0,0,0,175,176,1,0,0,0,176,25,1,0,0,0,177,178,3,32,16,0,178,181,3,36,18,
		0,179,180,5,40,0,0,180,182,3,28,14,0,181,179,1,0,0,0,181,182,1,0,0,0,182,
		189,1,0,0,0,183,184,5,5,0,0,184,187,3,36,18,0,185,186,5,40,0,0,186,188,
		3,28,14,0,187,185,1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,189,183,1,0,
		0,0,189,190,1,0,0,0,190,27,1,0,0,0,191,192,6,14,-1,0,192,219,3,36,18,0,
		193,219,3,34,17,0,194,195,5,1,0,0,195,196,3,28,14,0,196,197,5,2,0,0,197,
		219,1,0,0,0,198,199,3,36,18,0,199,208,5,1,0,0,200,205,3,28,14,0,201,202,
		5,5,0,0,202,204,3,28,14,0,203,201,1,0,0,0,204,207,1,0,0,0,205,203,1,0,
		0,0,205,206,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,208,200,1,0,0,0,208,
		209,1,0,0,0,209,210,1,0,0,0,210,211,5,2,0,0,211,219,1,0,0,0,212,213,5,
		33,0,0,213,219,3,28,14,18,214,215,5,18,0,0,215,219,3,28,14,17,216,217,
		5,19,0,0,217,219,3,28,14,15,218,191,1,0,0,0,218,193,1,0,0,0,218,194,1,
		0,0,0,218,198,1,0,0,0,218,212,1,0,0,0,218,214,1,0,0,0,218,216,1,0,0,0,
		219,265,1,0,0,0,220,221,10,13,0,0,221,222,5,23,0,0,222,264,3,28,14,14,
		223,224,10,12,0,0,224,225,5,24,0,0,225,264,3,28,14,13,226,227,10,11,0,
		0,227,228,5,21,0,0,228,264,3,28,14,12,229,230,10,10,0,0,230,231,5,22,0,
		0,231,264,3,28,14,11,232,233,10,9,0,0,233,234,5,25,0,0,234,264,3,28,14,
		10,235,236,10,8,0,0,236,237,5,26,0,0,237,264,3,28,14,9,238,239,10,7,0,
		0,239,240,5,27,0,0,240,264,3,28,14,8,241,242,10,6,0,0,242,243,5,30,0,0,
		243,264,3,28,14,7,244,245,10,5,0,0,245,246,5,31,0,0,246,264,3,28,14,6,
		247,248,10,4,0,0,248,249,5,28,0,0,249,264,3,28,14,5,250,251,10,3,0,0,251,
		252,5,29,0,0,252,264,3,28,14,4,253,254,10,2,0,0,254,255,5,32,0,0,255,264,
		3,28,14,3,256,257,10,1,0,0,257,258,5,34,0,0,258,264,3,28,14,2,259,260,
		10,16,0,0,260,264,5,18,0,0,261,262,10,14,0,0,262,264,5,19,0,0,263,220,
		1,0,0,0,263,223,1,0,0,0,263,226,1,0,0,0,263,229,1,0,0,0,263,232,1,0,0,
		0,263,235,1,0,0,0,263,238,1,0,0,0,263,241,1,0,0,0,263,244,1,0,0,0,263,
		247,1,0,0,0,263,250,1,0,0,0,263,253,1,0,0,0,263,256,1,0,0,0,263,259,1,
		0,0,0,263,261,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,
		266,29,1,0,0,0,267,265,1,0,0,0,268,271,5,10,0,0,269,271,3,32,16,0,270,
		268,1,0,0,0,270,269,1,0,0,0,271,31,1,0,0,0,272,273,7,0,0,0,273,33,1,0,
		0,0,274,275,7,1,0,0,275,35,1,0,0,0,276,277,5,41,0,0,277,37,1,0,0,0,24,
		51,53,77,79,94,104,109,114,118,122,130,136,162,172,175,181,187,189,205,
		208,218,263,265,270
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
